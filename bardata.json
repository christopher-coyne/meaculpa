[{"name":"user interface design","content":"Why does this Prof. even bother to teach, it's so obvious that he hates it and has contempt for students. There is too much reading for the class, as in addition to the textbook (not bad) he assigns copious amounts of PHD disertations that are total BS. The subject is interesting, but he berates his TAs and they then grade the projects harshly."},{"name":"introduction to databases","content":"Really nice Prof. Really good in office hours if you need a concept explained further. Interesting first project, second project in C++ is boring, takes it right out of textbook. The material is reasonably mixed with real world examples and theory. Grading is fair, although midterm and final are overly weighted towards theory."},{"name":"artificial intelligence","content":"this class was awful!  class was rough since there's SO much to write, there are no electronic notes available and although professor kender tells an anecdote about writing and speaking clearly during lecture, he quickly started writing incredibly small on the board.  the homeworks are killers and the midterm was really hard.  LISP is touted as the language of choice for AI, but having it thrown at us in a couple of weeks was just not helpful.  i can recognize LISP code, but i can't tell what it means.  apparently professor kender is trying to get a LISP course organized that you can take before AI which would probably fix this huge problem."},{"name":"operating systems i","content":"Prof. Nieh is a good professor.  His lectures, although boring at times, are informative.  My main quibble with this professor is the manner in which he interacts with his students.  He has a real disdain for them.  Be careful not to get on his bad side, or you will be subject to some of the most twisted, Gestapo-esque student-teacher interactions you have ever witnessed.  Trust him less than he trusts you and you will do fine in the course."},{"name":"operating systems i","content":"First and last impression of Sidorsky: the man is exceptionally brilliant and very well read. It is not often that your professor has the ability to lecture and provide the insight that can only be provided given that they were present during the time frame of what they were teaching. His lectures got repetitive as he took a long time to get through material bc he was constantly reviewing and rehashing. His eyesight is less than stellar as he will ask for questions and miss the raised hand that is in the front row. He definately knows his material well and delivers it well. as the last reviewer stated, show up to class, some part of the grade is attendance and exams are entirely lecture note based."},{"name":"programming languages and translators","content":"I'll say this for Prof. Edwards: he made PLT way more interesting than it should have been.  He is definitely one of the wittier professors in the CS department, so the lectures were engaging.  But if you're planning on printing out slides before lecture, be warned: there are a lot of them (about 40 per class, on average).  Plus, he really integrates his own research into the lectures, as opposed to just plugging it like other profs.  Central to PLT is a group project in which you get together with three other people and implement a programming language of your own devising, which is possibly the most challenging and rewarding thing I have done as a CS major."},{"name":"introduction to databases","content":"One of the kindest souls in the Comp Sci dept. There aren't that many profs that post on the web board as often as he does. His lectures may not be the greatest (in fact, you could do most of the learning by using the textbook and the lecture notes he posts online), but his homeworks and tests are pretty well designed. Has a tendancy to delay assigning homeworks until he has covered the material in class."},{"name":"user interface design","content":"Never in my life have I seen a professor hold so much contempt and disdain for his students.  Feiner's lectures are flat out boring and .  He has you read one or two of around 25 long research papers, and then just stands in a corner and writes sloppily on an overhead projector while discussing it.  He is impossible to approach, because he seems to believe that students (and their questions) are below him.  The three homework assignments here were not hard (about 15 hours each, roughly), but the final project was tough only because of the demo.  Doing a demo with Feiner is basically him apathetically saying \"mm hm\" every two seconds to your explanation, and then bringing up every bad aspect of your program to you that he can find in the 5 minute span and grilling you on it.  Tests are tough, too.  Feiner holds you responsible for those research papers on his tests, which are entirely essay form.  The bottom line: unless you enjoy reading insane amounts of research papers, steer clear of Feiner."},{"name":"artificial intelligence","content":"I have to put in my two cents here, because the only review on this guy is very misleading. Everyone I spoke to that took the AI class with this guy, hated life. He acts like he has better things to be doing that teachign the class, and at one point he said \"Life is not fair, tough\"\nHe started off great but his quality just went downhil very fast as the semester went on."},{"name":"user interface design","content":"I will admit that his lecturing style is pretty bad. But he does make time for his students in office hours, and looks like he genuinly wants to talk to you. You meet with him once, and he will remember your name. So that is one good part of this professor that shoudl be remembered. Workload in the class is not that bad."},{"name":"user interface design","content":"Since you really have to take Feiner if you want to ever take UID, you need to just ignore his poor ability as an instructor; just use this opportunity to read a lot of textbook material and research papers in this field. It is a field that is completely ignored in ALL other classes, and it is quite important. Unlike most courses in the department  it actually practical and applicable to anything you'll ever program. I do agree with all previous (bad) reviews. However, the problem with the allegedly harsh grading of the homework is that most of the grade is not based on functionality. Your program may follow all specs, but still get a C. It is the USER INTERFACE that gets you most of the credit. And you can only start thinking of user interface AFTER you completed all specs, which is usually around 5am the night before it is due. And that is truely a big problem with this class. But as you know from the previous reviews, you get some penalty-free late days to use on any combination of the first 3 (!!!)assignments. Another major problem is that there is a lot of reading, and it is all asked about in the midterm and final. As a rule of thumb, if there is a formula of some sort in any of the papers, it will appear eventually on a test. You will probably have to state it and explain it. Nothing too fancy, but you do need to memorize a bunch of them like it's a high-school history test. Not the end of the world, though. \nIt is true, this class feels more like a Humanities class that a regular CS class. You have to read a lot papers, and there are never problem sets (only programming projects with minor explanations of \"why did you choose the interface that you did\"). It is, though, not the hardest class you have taken or will take in the department, and it opens a window to a very neglected (and again, practical) area of compters. Lets face it, in the real world, your boss/client is much more likely  to care about the interface of your program. And like in this class, they are going to take the functionality as a given."},{"name":"user interface design","content":"User Interfaces contains useful, if somewhat obvious, material. He basically follows the book without adding a huge amount. He has a fair lateness policy, but seems unable to deviate from it when student's circumstances require it (i.e. sickness)."},{"name":"introduction to databases","content":"This was his first semester, and it showed. He just presented the lecture slides that came with the book, and read them outloud. Going to class was simply useless, if you had some other time to read it yourself. The first part of the class is  easy and straighforward. There's a big project in 3-stages to build your own database application (duh). The second part of the course reminded me of the good old days at Unger's comp org. However, even though Biliris is as boring and mistake-prone as Unger, he is really a cool guy. He even uses the break to go out and smoke. The second project had nothing to do with database. It could have been given to anyone who had taken statistics and data structures. Everything is graded by the TA."},{"name":"operating systems i","content":"Professor Keromytis has excellent background in BSD security research.  That is well and good, and I'm certain he could simply make a class to teach everyone about the work he has done and the publications he has somehow managed to get his name scribbled on.  However, he isn't really an Operating Systems professor.  That is to say that he speaks from the book, and like other CS classes, you never have to show up and can read the material on your own if you so desire.  Just work on the project and present it well at the demo and you'll land yourself an A.  Also, he's really not such a people person.  Interactions with students and the professor ranged from mild politeness to blatant rudeness, both in person and via email."},{"name":"introduction to databases","content":"Professor Ross has a cool Australian accent.  That's pretty much what kept me going to the classes, though he does teach mostly out of the book.  Either you go to the lectures and understand the material, or you read the book.  You can take your pick.  Also, the first half of the semester covers the more interesting stuff, while the second half can get way over your head.  Make sure not to slack off mid-semester.  You're probably better slacking off for the first month or so."},{"name":"artificial intelligence","content":"Prof. Stolfo is a wonderful and knowledgeable teacher, although his wry teaching style can be off-putting at times.  He also has a pretty good sense of humor for a CS prof - he ended the first lecture with the comment \"Intelligence is like pornography; you know it when you see it.\"  It helps that he co-created the course, so he not only knows the material inside and out but he is also passionate about it.  On top of that, he is incredibly friendly and easy to talk to.  He is also the only professor I've had who gives you buggy code on purpose (this can be good or bad depending on what kind of CS student you are)."},{"name":"artificial intelligence","content":"He is definitely one of the better professors in the CS dept.  He has a good sense of humor (a lot of jokes about his mother-in-law), and he's wonderfully friendly.  His tests are mad hard, and but his programming projects are okay.  You'll probably get lost in some of his lectures, but glancing through the text should clarify a lot of things that he talks about in class.  He tries to get the students to get involved during class, asking questions and trying to match faces with names.  Overall, his class is worth taking!"},{"name":"operating systems i","content":"A good lecturer who, unfortunately, seems to hold students in genuine contempt; it irritates him that we tend to insist on quality of education. No complaints on the lectures, and problem sets are ok, since they're book-based; it's the programming assignments that ruin the class.  They're a true mass-nightmare, since students are given literally no preparation for them, and lectures have nothing to do with them. Honestly, with no way to learn how to do the project on your own, can he really be surprised that so many of his students cheat? The plus side is that if you work your ass off (and I mean work your *ass* off) and pay close attention, OS I will teach you two semesters worth of Linux and Unix OS mechanics.  Unfortunately, if you have to take OS, there is really no other choice than Nieh.  Either hold your breath and scrap together a B, or split up with your boyfriend/girlfriend and move into the lab... just be glad that not all teachers care so little about coddling you as Nieh does. Hopefully, you'll actually learn something in the process, as he knows the material inside-out. And if Linux is old Hat for you, you might possible find yourself enjoying the class.  But not likely -- Nieh, like so many other cs profs, confuses a ridiculous 'sink-or-swim' approach for academic rigor.  He should wake up and face teaching like an adult; you should avoid him."},{"name":"introduction to databases","content":"The information is useful, but the class is boring. Professor Ross tends to give way too much homework much of which isn't necessary for understanding the material."},{"name":"artificial intelligence","content":"Stolfo is probably one of the best professors in the CS department. His lectures are entertaining, informative, and funny. He enjoys teaching and loves giving amusing assignments. He occassionally makes fun of students in class, but is also willing to allow his students to poke fun at him. The workload is medium, and the professor is very easy to talk with."},{"name":"operating systems i","content":"Great teacher, definitely one of the best lecturers in Columbia CS department. This is a rough class, but any class that involes with operating systems is rough, there's no way out. Hacking the linux kernel will be the most frustrating thing you''ll have ever done... but you'll get a lot out from this class, in terms of programming skills and systems knowledge in general. This class will also definitely help you to get a job if you are interested in doing IT as a lot of big firms are now hacking the linux kernel for their own benefit.\nOne warning: WATCH OUT FOR CHEATING FOR THIS CLASS, this class is notorious for cheating and THEY'LL CATCH YOU!!!\nBut this is definitely a fruitful class, definitely one of the best CS classes i took at Columbia"},{"name":"introduction to databases","content":"This is the most disorganized course I've taken so far. Homework instructions are unclear, piazza management is a mess, lectures are so slow and boring. He is probably the worst professor I've taken class with. Just avoid him."},{"name":"operating systems i","content":"In my opinion, Prof Nieh lives in the unrealistic world where a day has 48 hours or more for a student. The work load is way too much and his lectures are absolutely useless when it comes to doing the programming assignments. He might be an intelligent guy but anybody can handle an operating systems course by repeating what is in the text book.  I dont understand how this course has become so popular over the years. The regrading procedure is bureacratic crap and it makes life more miserable for the students who dont have the time to write down lengthy explanation as to why they require a regrading, as they are otherwise busy trying to complete the programming assignments. I believe there are easier more effective ways to learn Linux than trying to cramp it all in 2 and half months.  I would never recommend this course to anyone."},{"name":"introduction to databases","content":"Here's the bottom line on the prof and the class. The class is more than a standard db offering in terms of workload: you got to do two projects, a web based db app and another theory-type number cruncher (most db classes make you do that one big app as a term project). There's also homeworks, mostly easy, with an occasional twist. If you go to class, do the projects/homework and score above avg in the exams, you're guaranteed a B+. One caution sign I'd post is: don't ignore the prereqs. You *need* to know how to code, and you *need* to know some data structure stuff. Don't screw around on this one, or you'll run into trouble in the projects. Gravano is basically a good guy. He does his best to help you out (even tho he appears touchy in class when cellphones ring, laptops ping etc, and you got to get used to the self-deprecating humor bit.) He's cool in office hours and email too (he gave several important hints on the second project ... this was a *huge* help after I spent like a whole weekend going blind on the numbers.) Overall, low stress class and he's a decent guy."},{"name":"introduction to databases","content":"My opinion: the course is not hard, the prof is good.\nCourse covers all the basic db stuff. Most of the material is from the textbook. If you don't know programming you'll have a tough time so make sure you have the prereqs. The first project is a standard web/db app (what most db classes make you do). The second one is a number-cruncher type deal, it sounds kind of complex, but really is easy once you figure out the concepts.\nGravano is approachable and easy. Great in office hours, explained the 2nd project very clearly, I had no trouble running right into the lab and finishing it up. He also responds promptly to email. All in all, a kind soul like the other review said, tries to help you out as much as possible."},{"name":"operating systems i","content":"Ok, here's a simple test to determine how you'd do in Nieh's OS class. Rate yourself on a scale of (1=low to 10=high) on each of the following: C/UNIX programming; low-level debugging (i.e. pointers, memory traces, locking/serialization); Linux kernel. Now take the average. If greater than 25, you'll do ok. If greater than 15, expect to spend at least 10 hours a week in the CLIC lab. If less than 15 then **don't bother**. For real. If you are not an expert (or at least very very good) in C and UNIX, then *don't bother*. Now about the class itself. It runs at 200 miles per hour. If you can't keep up with the homework, then you are basically screwed. The programming part is **all Linux kernel hacking** and it is *not* covered in class. Don't expect the TA's to debug your problems and don't expect the prof to give much help except conceptual stuff. Of course, if you have munched Linux kernel code already, then this course will be a breeze. BTW, the cheating policy is outrageous (if the TA suspects you in the least, you are screwed.) Like the other review said, trust the prof/staff less than they trust you and you'll be fine. Prof is okay at office hours, but doesn't have time to give you detailed explanations and stuff -- either you go *very well prepared* or get thrown out in less than 5 mins. But if you can keep up with it, you'll get something out of it."},{"name":"operating systems i","content":"If you're going to look for a job in I.T. after graduating with whatever degree you're working towards, this class is a must. The fact that Linux is used as a case study throughout this course is *immensely* useful, if only that OS courses at other universities are taught with merely pedagogical operating systems such as Minix or Nachos. That said, the programming part of the homeworks was arduous and time-consuming (yet rewarding once you gradually grokked a solution, which ended up being less than 50 lines of code for most of the assignments). An able CS undergrad would spend anywhere between 10 to 20 hours a week on the homeworks (written + programming parts combined). Nieh's lectures are very straightforward, and they are very much worth attending. The class is all about *detail* -- for those in systems, there is mounds of it to drum into your head, and this class gives you good practice. The worst part of the class is not the homework, but the morons that you can be potentially be paired up with for doing the programming assignments.  Your partner may contribute nothing, yet s/he can get all of the credit for your hard work. Luckily, you get to submit reviews of your partners and they swap around the programming partners based on those reviews after the first two assignments."},{"name":"programming languages and translators","content":"PLT is a very dry subject, especially when taught using reams of slides.  However, Prof. Edwards is very funny and made the class very interesting.  He has a warped sense of humor and would spice up the lecture notes with hilarious pictures.  Here are some of his famous lines: \"hangs like a criminal\", \"a lazy approach gets you out of infinite work\", \"Things are always in the last place you look.  Of course they are!  You always stop looking once you've found it.\", \"Union is like a structure except its schizophrenic\", \"Symbol table is like a roach motel, you can checkin but you can never leave\", \"computer scientists are smart asses\", \"if thy arc offends thee\", etc. etc.\nOh, to my great delight Prof. Edwards would often preface a topic with \"this would make a great exam question...\".  Take heed this advice!"},{"name":"artificial intelligence","content":"This was my favorite CS class by far. Prof Dear is super nice and helpful. He explains everything clearly and really cares about students. You will learn a lot of practical algorithms. I recommend everyone to take this course."},{"name":"user interface design","content":"I mostly agree with what's been said by earlier reviewers, but wanted to point out some ways in which the class was different in the fall of '03 compared to earlier years:\nProfessor Feiner makes extensive use of powerpoint nowadays, as well as videos, some overhead slides, etc. The powerpoint slides aren't especially comprehensible in isolation, though; when reviewing for the midterm, have the notes in one window and google open in another to look up terms that aren't explained directly on the slides.\nApart from that, I don't feel like I really learned the vocabulary and concerns of interface designers working in industry; the class focused more on academic UI research, past and present. I plan to redress this by doing a fair amount of independent reading this term."},{"name":"artificial intelligence","content":"Awesome awesome class...Tony is so engaging in his lectures and very clear at explaining things. This was one of the most organized classes Iâ€™ve taken, even with it being fully online!"},{"name":"artificial intelligence","content":"A very nice professor who cares enough to learn everyones name in the relatively large class. \nBut I don't think she was born to teach. She is very well prepared in that she has everything on powerpoint, but she's not so great at answering questions that aren't in the powerpoint plan. She's also rather bad at coming up with good test questions, asking students to go through every step of an algorithm that is easy for computers, but painfully tedius for humans, and making that worth almost half the midterm. (And giving a full blue book for it).\nThe subject is fascinating, and if no one else is teaching it, I still highly recommend taking it. Kathleen Mckeown is a great professor if you want a friend and a nice office hours buddy, is knowledgeable and cares, but just isn't a born teacher."},{"name":"introduction to databases","content":"Honestly one of the worst classes I've taken. Lectures are so slow and the assignments are extremely confusing. Very disappointing"},{"name":"programming languages and translators","content":"If you are interested in programming languages or are required to take PLT to graduate, I would strongly encourage that you take this course with a different professor. In the beginning of the semester, you will think that Aho's lectures are pretty cool and  engaging. Moreover, there is a sense that you are basking in glow of computer science rock-stardom (he is one of the co-authors of the famed \"Dragon Book\" text that you will be using for the class). But, after the first three or four weeks, we were often told to just look in the book to learn about any new concept. In fact, each new idea that was introduced was concluded with the words \"go look in the book.\" He gives affectations to being devoted to his students, and I remember going to office hours several times to ask about topics that weren't being elucidated particularly well by the book. Each time, he forgot my name, and at the end of the (short) conversation, his helpful response was -- guess what? -- \"go look in the book.\" This was irresponsible teaching, and he's able to get away with it because he is tenured and famed within his field. His teaching style would improve vastly if he could only say \"go look in the book\" in other ways, like \"refer to the book for more details\" or \"the book contains much more information on this topic\" or even \"read the book and it will explain this concept better than I can ever explain to you during this lecture.\" I took this class in Spring 2004, and I'm sadly still bitter about this class. You will learn much from this course, but learning about compilers from this guy would be no better than, say, go looking in the book and reading about it on your own."},{"name":"operating systems i","content":"Professor Nieh is generally an amiable person.  He provided us with Halloween candy during the midterm and held a pizza party/review session for the last day of class.  His teaching style of writing bulleted lists and making diagrams on the blackboard is mildly helpful -- at least it's not Powerpoint.  The material was actually really interesting, and concretely brought together things I had learned in other CS classes.  Unfortunately, all of this pales in comparison to the torture of the homeworks: endless hours of staring at a computer trying to understand somebody else's LInux code that is hardly discussed in class.  The material taught in class was how an operating system works.  Ability to do the homeworks was in NO way a function of how well you understood this material.  Take this class if you don't care about your grade or have no social life."},{"name":"artificial intelligence","content":"Prof McKeown is a nice lady. Let's say that first.\nShe's a pretty lousy professor, though. It's hard to tell whether she's just bored with the material, or doesn't know how to make it interesting, or just doesn't care. In any event, her classes consist of a series of slides that are pretty much straight from the textbook, and a lecture delivered in monotone. She seems actively disinterested in any of the interesting intellectual, scientific, or philosophical implications of the material, and instead grinds through the most boring algorithmic parts, yet without enough detail or mathematical sophistication to make it worthwhile.\nAvoid if possible."},{"name":"artificial intelligence","content":"Prof. Stolfo knows the subject well, but couldn't deliver it well and control himself. He would beat the same dead horse over and over again until he realizes that he is too far behind and would start rushing through important topics (and as a result, miss important details). He would also ask questions in the final exam from topics that were not covered in the class just because PhD students were taking the final as their comp exams."},{"name":"artificial intelligence","content":"Definitely agree with the first poster, though for a different class.\nHe's one of the best professors I've had at Columbia, and has given me a great passion for AI. His lectures are very interesting; even though it was 9am I always went to almost every class (that's very unusual for me); and though I often brought other work to do, I never got any done. Except for the day or two when he'd go over the homework or test, he had my rapt attention every moment of class.\nFor AI in specific, he not only focused on the computer science of it, but also asked students to read a book called \"The Mind's I\", and set aside a few days to talk about the more philosophical (and very intriguing) side of AI.\nHe is a hard teacher though, and it's a hard class. Below the mean all get C's theoretically. However, he does offer enough extra credit to shift the curve up to the high B's if you choose to do it. He never accepts late work, but even I (who chronically turns everything in late) made every deadline."},{"name":"artificial intelligence","content":"I took this course in the Spring of 2004 and found it challenging and useful. The course covered the requisite material thoroughly, and offered intriguing (and sometimes quite difficult) programming assignments. Other reviewers complain about the focus on 'boring algorithmic parts' and lack of attention to philosophical implications. This is both ironic and inaccurate on a number of counts. First, the early part of the course was dedicated to a thorough consideration of the difference between human-like and rational behavior; in addition, a number of readings were posted over the term that addressed just these issues. Second, this course is offered in a computer science department; the capacity of computer scientists to have impact on scientific or philosophical problems is founded in the algorithmic details. Glossing over this material would cheat serious students who are willing to do the work. I enjoyed the course and still discuss and apply the material I learned."},{"name":"artificial intelligence","content":"A very good class and professor. Taking Artificial Intelligence with Professor Mckeown convinced me to pursue AI and computer science further. Very highly recommended."},{"name":"analysis of algorithms i","content":"I think he's a good teacher who can explain things well, but attendance does drop at the end, as people see that a significant part of the course revisits Data Structures.  I wanted to add that in Algorithms, he does not care whether the homework is handed in at the beginning or end of class (as opposed to his other class), and that undergrads are curved separately from the grads (the class is 80% graduate students)."},{"name":"user interface design","content":"A word of caution. Feiner seems to have a predanatural power to remember faces. His class will bore you to tears, so few people show up. However he still knows who people are, and for those that are on this floor a lot (CEPSR 6), this is a big problem. I mean either that or scowling glares are the norm in his lab.\nPS: The material covered is common sense. Any basic design class (in any field) will teach you everything this class does (and then some). The biggest problem with way this class is presented is that there are 200 billion different rules and guidelines, which all together sound like superstitious drivel. The field has few (important) pricinples, all of which are presented in the first week. The rest is a waste of time."},{"name":"user interface design","content":"I would not say that Prof. Feiner has a harmonious relationship with teaching, but it's hard to be more specific than that. He is careful to be organized and to cover material on schedule; yet he obviously hasn't edited the material he teaches in years - it's old and mostly irrelevant, although the final 3 weeks of class finally had some traction. He tries to be a good guy (I guess) by telling you how to prepare for exams and then says \"do all the [voluminous, outdated] reading and review your class notes,\" as though that's helpful -- and then asks a couple of questions on the exams that are calculated to punish all but those who memorized the course material. 40% of the midterm, for example, was based on a topic covered by 3 pages in the text and a couple of his slides -- all of which seems faintly  sadistic.  The individual HW's were interesting; there could have been more of them. The team projects, as always, were an aggravating waste of time. I think that if, as a start, Feiner updated 60% of his course material and learned how to relax, both his and his students' attitudes would improve."},{"name":"operating systems i","content":"Erm... some people formed a cult of personality around this guy, but I found him to be kind of lousy as an instructor and had a tough time maintaining any interest. A lot of questions would be answered in the form of a long, irrelevant story, which was annoying, and the exams were sort of harsh.\nGuest lecture from the VMWare guys was pretty cool. I did eventually warm to this class as the term went on, and doing some kernel hacking will make you feel warm inside, so... Plus it's not like you get a choice, really."},{"name":"introduction to databases","content":"Prof. Gravano is great as a person, and puts much effort on teaching, but for reasons I can't even try to understand, he also puts great effort in making even the most basic concepts ungraspable and obscure - obscure in the sense that they appear like irrelevant details that won't help you one bit in getting through the course, let alone a job interview.\nThe first half of the course dealt with DB design and SQL coding, and was relatively easy,\nthanks in great part to the self-explanatory, standard flow charts used for DB design and to the equally obvius SQL code. The second half deals with DB I/O cost analysis, and was difficult enough for Prof. Gravano to turn into - take your pick - Derridean post-modern literary theory or Martian rocket science. Even in the project assignments the most obvious concepts were mangled into research paper theory filler - my project team mate, who sailed through the course, kept wondering why on earth the guy would go to such lenghts to turn the clear and easy into the hermetic and impossible. \nAgain, I never had any doubt that Prof. Gravano was putting more than enough effort on the class, considering that as a top scientist on the field he had a busy enough schedule, but the obscurity of his explanations made lectures a tough going, until by the second half he was making jokes about everyone falling asleep. The blank looks he was getting by then contrasted with the sincere interest everyone had on the course material before the midterm, when his challenges and questions started such debates, he had to stop and ask people to quiet down. \nThis is one of the few courses in which the difficult textbook proves more useful than the overflowing PP slides or the teacher's talk. The TA I was assigned for the project appeared to get kicks out of taking points for the most trivial mistakes, but then again, it is difficult to blame the teacher for such things - in fact he was the one who had to ask her to take it easy with the grading."},{"name":"operating systems i","content":"I liked Angelos.  He seems intimidating at first (if you judge him by his mugshot on the columbia site), but he's really very friendly and takes time to explain things again if you didn't catch it the first time, and seems to enjoy teaching this class.\nConsider this class CS bootcamp, though.  If you're not completely comfortable with C and the linux kernel, the assignments will kick your ass.  They took up all my free time, essentially, but somehow I enjoyed it.\nI found the midterm to be much easier than I expected, but the final test was pretty brutal.  \nAll in all, I would highly recommend taking this course and this professor."},{"name":"operating systems i","content":"There's a CULPA review of Dan Rubenstein in which the reviewer compares him to a sushi chef who just hands you a dead fish and then criticizes your cooking skills. Keromytis is much worse than that. He's more like a swimming teacher who throws you into a huge pool of acid, then just randomly rambles on about the Summer Olympics. In his lectures, he was always talking about new concepts without introducing them first. Example: one day he was talking about page faults, as if everyone knew what a page fault was. But he had never talked about page faults or pages in class before. I raised my hand and asked \"What's a page fault?\" He said, \"Oh, that's right, I haven't talked about pages yet. I meant to say 'TLB miss', not 'page fault' \". OK, fair enough. But then, a few minutes later, he used the term \"page fault\" again. He STILL hadn't introduced the concept of pages. You need to be aware of what you're saying... Don't assume we know these things, we don't all have like 8 million PhD degrees in CS like you. It's a CLASS. We're there to LEARN. That means most of us didn't know anything about this crap at the beginning of the semester.\nKeromytis is one of the many professors at Columbia whose teaching skills were NOT taken into consideration at all when Columbia decided to hire him. If Columbia decided jobs based on teaching skills, Angelos would be fired tomorrow. Basically, he got hired mainly because he's good at acquiring money for the university through research grants.  Learn how to run a class. Oh, wait, I guess you never will learn that.. Columbia has tons of professors who were hired like this. All the most selective colleges in America (the \"top-tier\" colleges) do. It's a serious problem with the American academic world today. Before I started attending Columbia, I heard that the Ivy League colleges were the \"best\" colleges, and I used to believe it. But now, more and more, I'm finding that idea hard to swallow."},{"name":"operating systems i","content":"Pure hell. Though Shulzrinne is a very competent lecturer, who fills the powerpoint-driven class with his vast array of knowledge and with up-to-date news (he even brought up newegg.com on the screen to be sure of the size vs. price of hard disks today) the course itself is probably the most intense you will EVER see in this department. \nBe prepared for a very new kind of programming; you won't be writing anything from scratch (save perhaps the first project where you write the unix Shell). Instead you will have to understand lots of cryptic code and obscure structs in the kernel in order to piece together half of an understanding of what is going on before you can actually make changes. The development cycle, far from being the simple 'javac blah.java; java blah' will instead be tweaking small sections, recompiling the kernel, and rebooting, which can take the bulk of your time. The three TAs, however, were very available and ready to help out."},{"name":"programming languages and translators","content":"I don't know what to make of Edwards. I like the guy, and I'm *pretty* sure he's a good professor. But I can't prove it.\nEdwards knows everything about language design; he's funny and relatively friendly. He keeps the lectures interesting, sort of -- but by the end of the term nobody went to class. For one thing, ONE annoying kid managed to ruin the whole term by asking ridiculously irrelevant questions every five seconds, and Edwards never really tried to shut him up. So the lectures kind of went to shit from that point on.\nBut! PLT is super-intense and is probably the first (well, maybe OS) 4000-level course that actually kicks your ass. Personally, I like this. You work in groups and design a language; if you're like us, you leave it until reading week and then just live in the CLIC lab for a few days. You can do it, but it's a bitch.\nAnyway, you're just choosing between Edwards and... what, Aho? for this class, so choose Edwards."},{"name":"analysis of algorithms i","content":"I think Professor Stein teaches well. He understands the subject thoroughly as can be seen in his explanations. I haven't seen even one instance of a question he couldn't answer convincingly. He is helpful in office hours and will walk you through a problem if necessary. \nThe class is in the morning (9 am ) and it's possible you will sleep through some classes. But every class is worth going to (take coffee !) . I find Stein's explanations in class easier to understand that the book. Many a times I have gone back to my notes because the book seemed to complicate thing a trifle."},{"name":"programming languages and translators","content":"I personally like his interesting sense of humor, but some find it annoying.  As a transfer student, I feel he gave the other side of programming languages than my other class which was more theory-based -- one down side is that he doesn't know that much about the lambda calculus, which seems to be a big hole in somebody teaching programming languages.\nIn terms of teaching the material, lectures can be a bit scattered but always have great information.  His homeworks and exams are more than fair as they are straight out of the lectures.  If you are in his class, attending the lectures will make you do well in the class."},{"name":"operating systems i","content":"This class was the class I have learned the most from, and has also been the class from which I have gained the most marketable skills I have and have at least indirectly landed me job offers.\nSometimes professor Nieh presents material in a suboptimal order, but he is very good at explaining low-level system concepts and hardware interactions as well as higher-level algorithms.  Exams are definitely fair, but homeworks can be ridiculously difficult in some cases, but others are a good amount of work and are very educational.\nHe is also very approachable in person and will help with concepts outside of class and welcomes feedback as well."},{"name":"programming languages and translators","content":"In all, Professor Aho was a pretty interesting teacher who went over quite a bit of useful material in an ultimately fulfilling class. He is friendly and always willing to talk, and is very approachable during office hours. I would recommend him for CS4115."},{"name":"programming languages and translators","content":"Overall a good class. Good programming assignments, some of the written hw questions can be vague. Class lectures were alright but were unfortunately scheduled to start at 9:10AM, so I missed most of them.\nExams were not problematic if you knew your stuff, which you would if you could do the homework.\nOn a side note, I was able to use this class to get quite a nice bit of experience doing multithreaded programming. That was pretty nice."},{"name":"operating systems i","content":"Operating Systems is typically taught by Jason Nieh. This past semester it was taught by Prof. Nahum.\nOverall, Nahum is an interesting lecturer who tries to engage the class as often as possible during lectures. He is very approachable and very helpful as well, if you are in a bind (say if the pressures of the world make you and the rest of the class need a hw extension).\nGoing by the number of assignments (and what Prof. Nahum said at the beginning of the semester) the class is a bit less hardcore than when Nieh last taught it, but all the important bits are still intact and you still learn a lot.\nIf Nahum teaches OS again I would definitely recommend it, as he is a pretty solid teacher."},{"name":"operating systems i","content":"Hardest CS class you'll take at Columbia, hands down. Also, the class you'll learn the most from. Work hard in this class and you will be rewarded. Work not so hard and, well, you'll know the theory fairly well, but that's about it. This class requires a highly intimate knowledge of C--if you don't know it very well, then either skip the class or be prepared to read the K&R book thoroughly.\nThe course covers the internals of the Linux kernel and we worked specifically with 2.6.11. Nieh covers mostly theory in class, and there is one text which goes over theory in more detail, and one which is a god-awful dry textbook (more like a manual, actually). The assigned readings aren't that long, and you will definitely need to do them--otherwise you will have no idea what the hell is going on. That being said, his lectures compliment the readings very nicely. Nieh was one of my better profs in terms of not \"teaching out of the book.\" However--Nieh is the person you go to if you don't understand theory. If you need help with the homework, skip him and go to the TAs directly (he has little involvement in the homeworks).\nFor each homework, you write a patch to the kernel that does something. After you submit, you have to meet with the TA for ~30 minutes to demo it, and they will also run their own test program on it. Be careful as they are NOT AT ALL forgiving if anything goes wrong--if you can't get it to work (even for a stupid error like you submitted the wrong file), you lose practically all points. Also, each HW has a written portion (~10 questions, usually 50% of the grade).\nHWs:\n1. Basic stuff, write a small shell, etc.\n2. syscall logger: not that hard, just an introduction to syscalls/the virtual machines you'll be using\n3. waitqueues/locking/threading stuff: you don't have to write that much code, just be careful what exactly you write.\n4. implemented a new scheduler type. most of the class just skipped this HW entirely, i recommend you give it a shot, but, don't bother if you can't get it.\n5. memory tracker: write a syscall that can track what chunks of memory you're using. requires you to go low-level with page tables, etc. tough but doable.\n6. process tree filesystem: make a filesystem that reflects the processes on a system. it's a lot easier than it sounds; he gives some examples of other pseudo filesystems in class."},{"name":"operating systems i","content":"This is by far the most demanding and rewarding class I have taken as a CS grad student at Columbia. The famous 6 Linux kernel homeworks were just as time-consuming as could be expected. However the Prof and the TA:s were very helpful and there is a good discussion board belonging to the class. It was possible to skip one homework without a grade penalty. The first two assignments were not that difficult but 3-6 was very challenging.\nThe exams were in general pretty straight-forward if you had attended the lectures during the semester. The lectures however were rather slow and somewhat obstructed by irrelevant questions. The level of the lectures were much lower than what was required to finish the homeworks.\nThe best advice I can give for this class is to preferrably get familiar with C and Linux as much as possible before starting the class. No previous kernel programming experience is necessary but not having to spend time with syntax problems is very nice. \nBut anyone interested in low-level programming should definately take this class."},{"name":"artificial intelligence","content":"Pasik is an interesting and fun guy.  It does help to be the right kind of student (interactive, awake, asking questions).  He usually doesn't have a text book and doesn't do much on the board or with notes.  He basically talks to you.  Attendance is absolutely essential.  If you show up every day and pay attention, you can't help but get an A, because he explains everything.  If you skip classes, and you don't already know the material, then you're in trouble.\nWhile I like him as a Professor, he's not the strongest when it comes to math or theory.  He's a pretty practical guy.  That works for him though, especially in data structures, which is a practical course.  His coding skills are very well practiced.  If you want your code to be clear, modular, and work the first time, watch him go through code.  If he posts code online, take it and put it in your coding base.  It's really well written code.\nBy the way, he loves recursion... really loves it.  The main thing I learned from him was how to write concise, elegant, semantically clear, recursive code.\nLittle things to note:\n1.  He will not accept anything late.  He assigns things extremely far in advance.  Get them done.\n2.  Make sure you really get the material.  Since he lectures well, the average scores on the tests tend to be pretty high (at least in my experience).  So if you want an A, you need to do well on the tests.\n3.  The tests are really straight-forward (no surprises), but they might require you to actually know what you're doing (not just get the gist).  He will make you write code snippets on the spot on exams."},{"name":"operating systems i","content":"This course is the best CS course I have ever taken.\nI entered the course with very little C experience and with hardly any Linux experience - let alone any kernel programming experience. After taking this course I did a project for the professor next semester and I now feel confident to take on large kernel intensive projects.\nFurther, even if you're not going to be an operating systems developer, taking this course will make you understand all those details, which are unavoidably important, but always seem vague without having real OS experience - such as memory management, device drivers, threads and processes and more. I have taken another OS course before this at another institution, and I have to say that a course like this should be mandatory for all CS students.\nJason is an excellent teacher, who is very approachable and answers any question with insight and dedication, so take this course with him if you have the chance.\nOnly criticism is that I think there should be a homework related to writing a driver/module instead of for instance changing the scheduler, as it is more relevant for most of the kernel work to be done by the majority of people. Also, the classes do seem a little slow at times, but I guess that's more of personal preference."},{"name":"analysis of algorithms i","content":"I guess professor does not have experience in teaching. She is not able to properly deliver the lecture, she herself is confused most of the time. Its a wastage of time attending her lecture.\nIts better to study by yourself from book as her lectures does not contain anything new.\nWhen you ask her some doubt, you will find that doubt is still doubt.\nMoreover, she is very harsh to the students, in short not at all student friendly. She even does not listen to the student's problems. Her grading is also very strict. I will suggest not to take this course under her. \n."},{"name":"artificial intelligence","content":"The lectures were definitely entertaining, but I can't say I actually learned anything from them.  The professor is definitely skilled and experiences, but almost to a point of not caring about our individual class.  The professor does not have office hours, and even if you try to schedule a meeting he will simple tell you to stay after class - this is not very conducive for going over material.\nAlso, the teacher did not show up for the last day of class and instead had the TAs teach a review session.  We were not informed of this change until the weekend before the last day of class.  Since the teacher doesnt have office hours, we should have known that the second to last class (two weeks before the final) would be the last time we see him.  Moreover, the final review was worthless - see notes on the TAs below.\nFinally (though I am about to comment on the TAS individually), I have never been more frustrated with a set of TAS.  Despite spending a significant amount of time trying to better understand the assignments in office hours, the tas would ask questions like \"Are you sure there is an exam next week?\"  The TAs spoke so little english that we were reduced to playing pictionary."},{"name":"artificial intelligence","content":"I don't know why Pasik has a silver nugget because there is absolutely nothing good about his teaching. It is very clear that he has experience in the field and he is a friendly and intelligent man, but the fact remains: he reads off slides word for word, cannot answer the majority of questions we ask on the spot, and does not care whether or not we learn the material in the slightest.\nWhen we ask questions in class, we get one of the following: \"well... that's not important to our discussion right now\", \"uh... I don't know off the top of my head... but I'll look it up and get back to you next class\" (he never did), \" uh, well... that's a good question! We'll get back to that later...\" (of course he never does).\nAll of the homework assignments are purely LISP programming projects, and when asked one day in class how one writes comments in LISP, he did not know! He had to look it up online while we sat there staring at him and waiting! I cannot believe that he would require us to write massively complex programs in a language that (1) is not taught in the class and (2) he doesn't even remember the syntax for something so basic!\nHe does not hold office hours, so the only time you can ask him a question is before or after class, but he employs the same techniques he uses in class to brush off your questions (and you couldn't even go to the TAs for help since they had heavy accents and also had difficulty expressing themselves in English)! Even worse, he didn't even come to class on the last day which was supposed to be our final exam review session, but instead had those same TAs run it. We were not notified of this change until one or two days before the class itself. The TAs did an awful job, just pulling up his PowerPoints and letting us stare at the slides which corresponded to our questions for a few minutes (I'm not kidding - this is exactly what they did)."},{"name":"introduction to databases","content":"Professor Gravano is a phenomenal instructor. He presents the material so clearly that at times you'll be bored to death because everything seems so simple! Don't be fooled, though -- this is only because he teaches so well (I made the mistake of being lulled into a state of overconfidence and skipped out on a few lectures, and I'm paying for it now just before the final!). \nGravano clearly knows his stuff and can answer any question you might have - if you ever have a doubt, don't hesitate to ask him a question because after he's through explaining, you'll wonder how you were *ever* confused."},{"name":"artificial intelligence","content":"Prof Pasik is basically an entertainer rather than a good teacher . His gestures and mannerisms of teaching create humour but at the same time it dilutes the seriousness of the subject . The paper pattern is in no way connected to the teaching in the class. He leaves class about half an hour early in each lecture ; the time duration I thought he could have utilised better by giving more insight about lisp which was alien language to most of the students if not all. Once he even conducted a survey which was his daughters' high school assignment - again a total waste of time . Assignments are not discussed in depth . Avoids answering doubts with cheeky replies . Overall not a good source of knowledge."},{"name":"analysis of algorithms i","content":"Prof Stein is a good prof w.r.t.knowledge but his academic policy is not foolproof or rather I can say has a lot of loopholes in it . On one hand he does not prefer people referring to the sources on the internet whereas on the other hand his TAs give full credit to those who discuss the sums . So copying verbatim under the name of discussion is prevalent but if someone wants to access wikipedia or any other internet source then it is not allowed . Also the policy of picking up individuals for violating the academic policy seems to be random as many copy cats do escape . Also both the professors of algorithms do not show the same honesty while following this highly controversial and confusing academic honesty policy"},{"name":"operating systems i","content":"Operating systems is a mad hard course. The assignment take forever. If you don't need to take OS you should avoid it altogether. Its a very painful course, having left me sitting in that smelly CS lounge staring in front of ugly terminals displaying kernel bug and panic messages on warm spring weekends while everyone else plays with frisbees or what ever the youth plays with these days. However the skills learned from this class could come in handy; it helped me net a sweet job so the pain was worth it for me.\nThe theory behind the class isn't too bad but the assignments involve changing the actual linux kernel to do new things. The kernel is very confusing and has many program practices which would normally be considered bad, such as extensive use of macros, but is justified for efficiency. There are a ton of underscores everywhere which annoys me (I prefer the Java capping style but oh well). Also since its the kernel debugging is a lot harder. Make sure you thoroughly understand C before this course."},{"name":"artificial intelligence","content":"Pasik is without a doubt one of the worst professors I have had at Columbia. Though his lectures are entertaining, they gloss over the course material and provide little to no insight into the concepts, test material, or homework assignments. He always ends class early, for such reasons as \"I'm going salsa dancing!\" When asked a question in class, he often doesn't know the answer and responds with some bs, or says he'll answer it next week with an example. Subsumption, for example, is not hard and something that he should be able to define and provide an example for on the spot, but he can't. His lectures have clearly not been updated in several years, and it shows. It seems like there are typos from the 90's that would take 2 seconds to fix, but doesn't bother to do anything to fix them.\nAll your homework is in LISP and Pasik barely covers LISP in class. Your knowledge of this language comes completely from independent study, and the homeworks are very time consuming. You would think that he could at least provide some sample LISP programs or god forbid tutorials that he quickly googled, but no, he leaves that up to you. As for the actual homeworks themselves, that are so vague and non-descriptive that you'll spend half the time trying to figure out what you have to do. Days or even hours before the due dates, TA's will post requirements on courseworks of things that you must include in the homework. He does not provide solutions to the homework, so you're screwed in that sense. He reuses the homeworks every single year, without changing them at all. This turns out to be bad because he could make the homework prompt more descriptive than 3 sentences. Be prepared to spend 40+ hours for each of the 3 homework assignments, and start them way early (you do have plenty of time). He probably has never read his own culpa reviews, and doesn't realize that he needs to REALLY update his lectures, homeworks, and tests.\nHis tests are ridiculous. No amount of studying can prepare you for them. It's not because you don't know the material, it's because you have to predict the answer that he's looking to hear. Even if you're answer is correct, as the TA agreed with me on several occasions, he could not award points because it was not identical to Pasik's horrible solutions. If you know the material and feel prepared, you can still do poorly because you did not mention something in your answer that was not asked for in the question. You will lose points for not writing a novel for each answer.\nPasik does not hold office hours and does not care about any of his students. Don't bother sending him emails or trying to get help from him."},{"name":"introduction to databases","content":"Where to begin...\n1) This class was useless. Biliris is a mediocre lecturer and an incompetent teacher (or he just wasn't trying). His lectures were a complete waste of time. He would crap on and on about some simple concept in the most unintelligible way for an hour at a clip. I can honestly say that I did not learn anything substantial from this class. By the sixth week half of the students did not show up or left at the break. By the fourteenth week it was more like 80%. The material was presented with no context and no depth. I could have taught this class better than he did, and I do not have near the amount of database and teaching experience as he does.\n2) I ended up doing all of the group work by myself because my partner was so lost. I cannot blame him considering the lectures were essentially black holes. If I had not had database experience prior to this course I would have probably been as lost as my partner, who had none.\n3) A bit of the material was out of date. This happens in CS classes often, but it was particularly bad in this class. I think the textbook we were using was from 2003.\n4) We were forced to use Oracle for our projects, which was a nightmare. Oracle is one of the most bloated and hard to learn database systems around. Why we would use Oracle and not MySQL (very popular, modern, and easy to use) is beyond me.\n5) Biliris does not understand English well enough to teach a course. He can hold a conversation, but he cannot explain complex ideas. He did not understand questions asked by students and he often hid this by making fun of them.\n6) The grading in this class was ridiculous. Often points were taken off if we did not answer a question exactly how the TAs thought we should have, despite those requirements not being specified in the assignment description. Each homework and test problem was graded by a different TA, which meant you had to contact many TAs if you had questions about more than one problem. This was incredibly inconvenient.\n7) My assigned TA had worse English skill than Biliris, which made him useless to me."},{"name":"artificial intelligence","content":"I tried very, very hard to like this class.\nHere's my dilemma: when Stolfo teaches this course properly, it's a blast. He's an engaging, funny lecturer, the material is interesting, and the homework is a genuine pleasure to code. \nMost of the time, though, he doesn't teach it properly. Stolfo seems to have gotten it into his head that AI ought to be conducted like a Socratic seminar; as a consequence, you will spend most of your time in this class in awkward silence people do their best to avoid making eye contact. To make matters worse, he has a particularly nasty tendency towards extreme vagueness, so his questions tend to be things like \"so what is it about this problem?\" or even \"what was the thing that you learned during the first half of the course?\". That may fly CC, but in a computer science class (and particularly one requiring an above-average level of formal rigor) it's hard to imagine a less effective teaching style.\nThe real problem here is that because nobody answers his questions, the lectures creep ahead very slowly, and class falls further and further behind schedule while trying to get through basic material. Then, he realizes how far behind we've fallen and skips ahead over all the tricky stuff. As a result, we ended up spending a week and a half on BFS and a day on alpha-beta pruning, and two weeks on symbolic logic followed by fifteen minutes about Bayesian inference.\nThat same vagueness also seems to manifest itself on just about every exam question, which might explain why the average on both midterm and final was below a 60% (and mind you, this is a class made up of half MS and PhD students).\nWhat's really maddening is that on the handful of days he says \"Fuck it, I'm just going to lecture today\" the class is great. If he could be somehow persuaded to do this all the time I would have no hesitation at all in recommending this class; as things are right now, my feelings are mixed.\nOther random thoughts:\nThe TAs were some of the best I've ever had -- friendly, approachable, and (with the exception of one disastrous mistake that made the midterm quite literally 25 times harder) very knowledgeable.\nI came into this class with the rather unique advantage of already knowing Lisp. Regardless of what the syllabus may say, they will teach you no Lisp at all, but you will be expected to know it. If you, like 90% of the class, have never seen it before, you might be well-served by picking up a copy of SICP to read over winter break.\nMake a real effort for the gameplay tournament. Five or ten points is nothing to scoff at when everybody fails the midterm (and it's fun).\ntl;dr. The short answer is that I don't see any good reason not to take this class over Pasik's, and if Stolfo cleans up his act for next year it may even wind up being your favorite."},{"name":"artificial intelligence","content":"This class was an incredible disappointment.  Stolfo managed to make interesting material difficult to learn through his insufferable lecture style and frustrating programming assignments.  He rants and pontificates, only occasionally delivering actual content.  He seems to teach this class to have a captive audience for his jokes, which alternate between offensive and inane.  Many are posted on his website, reflecting his general unprofessionalism.  I found Stolfo so loathsome that I couldn't bring myself to go to lecture for the last month.  When I tried to watch the lectures online (they were all posted because the class is offered to CVN students) I couldn't watch for more than 20 minutes.  He started one class sulking because the 15 people who still attended class were not being responsive enough to a series of vague/inane questions.  He tries to put on a dramatic and inspiring performance (like Gulati perhaps) but since he utterly lacks charisma the result is grating.  For example, he asked the class on numerous occasions, \"do you remember when you first touched a stove and learned what hot means?  do you remember? do you?\"  He would keep this up until someone pretended like he or she had a memory of this exact experience.  To most, this would seem like a rhetorical question but he wouldn't stop until he received confirmation that this very same scenario had happened to each of us.\nThe midterm and final were almost entirely composed of trick questions rather than straightforward questions about material that we had actually learned.  I think they were supposed to be easy but I didn't understand what they were asking.  Since I got around the mean grade on each, it seems like most of the class was similarly bewildered.\nStolfo's approach to teaching Lisp was to reminisce about the early days of computer science when it was just an elite group and make us fix buggy code.  While the programming assignments were ultimately the only worthwhile part of the class, I think they could have been less frustrating while still teaching the same important lessons.  After being exposed to Lisp for 50+ hours, I felt like I had learned how to conquer it and work around its structure rather than actually feeling comfortable.  While Stolfo's introduction to the language was certainly inadequate, Lisp is basically just a frustrating language.\nIf you can tolerate these jokes (http://www.cs.columbia.edu/~sal/notes/y13.html) or find them amusing then take the class with Stolfo.  Otherwise, avoid."},{"name":"introduction to databases","content":"Absolutely awful. His lectures are boring as shit and he doesn't actually realize that a 2.5 hour class can be taught in more than 8 powerpoint slides (literally). For some reason, he's obsessed with Barbados too and won't stop talking about it.\nBut now onto the real stuff:\nDon't bother going to class. Read his lectures that he posts online (takes about 30 min) and save yourself the other 2 hours. I can't stress enough how useless his lectures were. It's basically like taking a class online, you just have to show up for the midterm and final. The material is actually extremely useful and somewhat interesting.\nLuckily though, the material is easy and there's not much of it. There's a grand total of 10 short lectures (only 9 of them are tested on), compared to other classes that have about 25 a semester. The average won't be that high because you're with a bunch of IEOR majors and grad students that don't know how to program. The 4 homeworks can be tricky at times, but honestly not too bad.\nThe group projects are relatively easy and straightforward. You just have to demonstrate that your projects contain every concept that was taught in class, regardless of whether or not your Database schema will benefit with it (i.e. Aggregation is great in theory, but NOBODY puts it into practice in their database. it makes things painfully redundant and difficult. but since we learned it in class, you'll lose a substantial amount of points if you don't have aggregation in your database). Don't bother making your project look pretty or have much functionality. As long as you demonstrate the concepts that were in class, you'll get full credit. The median on project 2 was 49/50, if that says anything to you.\nYou have a total of 6 late days, 3 for the individual homeworks, in total, and 3 for the projects, in total. So clutch.\nMidterm and final are straightforward. If you know relational algebra, SQL, and the concepts, you'll do fine. And let me remind you, DON'T GO TO HIS LECTURES."},{"name":"user interface design","content":"This class is great for someone that is planning to go into UI research. For everyone else, not so much. It should actually be called \"The History of User Interface Analysis and Research.\" Feiner spent many of the lectures describing, in laborious detail, research projects and ideas from 15 to 30 years ago.\nAs the review before mine points out, the tests are sadistic. Unless you have a photographic memory, you are not going to do well. The midterm's questions were based on less than 1% of what was covered in the lectures, textbook, and articles he asked us to read. For example, 20% of the test was based on one random paragraph from one of the many articles. Another 20% was based on a topic he spent literally 5 minutes talking about during a lecture. Why is this a bad idea? It rewards students that have better memories or, to a lesser degree, that happen to get lucky because they studied the 1% of material that shows up on the tests. Studying for Feiner's tests is essentially a game of roulette, but with much a lesser chance of success.\nOh yeah, and Flash Builder 4 is terrible."},{"name":"operating systems i","content":"This is not a \"mad hard\" course, but a few bad policies unnecessarily make it more painful.\nDespite repeated pleas Prof. Yang did not post the slides before lecture, his reasoning being that this would force everyone to take notes. This voodoo pedagogy ended up discouraging me from taking notes. Please take a look at this: \nKimberley A. Babb, Craig Ross, The timing of online lecture slide availability and its effect on attendance, participation, and exam performance, Computers & Education.\nHis slides are pretty incomprehensible/garbled in most places and too verbose in others. Prof. Yang is pretty earnest, so it may be a matter of N-iterations. \nThe TAs for this course were not the best. They're perfectly OK with the grading but their mannerisms, politeness and preparedness leave a lot to be desired. Also getting the TAs to grade parts of the exam is ridiculous.\nSpring break gives you a breather, so if at all possible take OS in the spring. Prof. Yang will have asides on topics like Files Systems, Concurrency, Testing etc. whereas Prof. Nieh (Fall) talks about other OSes like Android. Other than that the two offerings are almost the same.\nThe Linux kernel is written with *excellent* C programming practices. Some of the constructs are delightfully concise yet ridiculously extensible and performance tuned. Doing the first assignment to its completion will get your C programming up to scratch."},{"name":"operating systems i","content":"OS is an essential course and you could learn a lot about kernel programming. \nHowever, personally speaking, Prof. Yang's classroom delivery is the worst that I've ever seen at Columbia. The first several classes, it turned out to have 50-70 attendance. Then, this number continued to drop and after Spring Break, we've only had 10 people or so in the classroom. It seems people prefer reading textbook. A lot of errors in his slides. He's a nice person tho.\nSome TAs in this course are really bad, in contrast, some are really good. I agree with the previous review. One TA had a serious attitude problem and he looked down upon on the students. And it seems that there's few communication and discussions among the TAs, so that they have different criteria when grading. A lot of grading errors. It's totally unprofessional."},{"name":"analysis of algorithms i","content":"I took the class CSOR 4231 with Prof Yanakakis. Unless you are really stupid, do NOT take this class under this Professor. Granted, he has great credentials and has won a Knuth prize or two for his research. But at the end of the day, teaching a course is not the same as doing research and not everyone can do both well. \nInstead of making the class interesting and explaining the background behind how algorithms should be designed and how they came to be, he just puts the algorithm on the board and makes a poor attempt at explaining it. Watch one lecture given by Stein on CVN and you will be inspired .. and sit for one lecture with this guy, and you will forget the little you knew before the class. His homeworks concentrate more on proving correctness than on designing algorithms and mapping problems to standard algorithms. It is a pity that a researcher of his caliber, does not have the ability or the inclination to make this class interesting. Believe me, you would be better off watching lectures on MIT OCW or stein's on CVN. You have been warned."},{"name":"artificial intelligence","content":"He's an entertaining and friendly guy. Class is always interesting, and he incorporates more philosophical aspects of AI into the class, besides just focusing on algorithms.  There were four programming assignments, the first one was extremely easy, as it was just to teach you LISP.  The other four assignments did take some time, but they weren't break-your-back difficult.  The tests were all very reasonable and short.  If you read the textbook and went to class, you couldn't help but score well.\nHonestly I'm surprised at some of the reviews here.  \nFirst and foremost, some people seemed to say that he was poor at answering questions.  If anything, I'd say the exact opposite!  He would always take time to address questions, and would even work them out on the board if he didn't have the answer on the top of his head.  He was in *no way* dismissive of questions, and actually was looking for questions from the class more often than we had them.\nI can understand that some people might dislike his teaching style if they don't want to engage with him, but really, if you pay attention, you learn a lot and are entertained at the same time.\nAnd by the way, as some people have mentioned, he really does like LISP and recursion.\nOverall, I definitely would recommend him, and I think he is deserving of a silver nugget.  I think the best thing about him (and this course) is that he inspires interest, because you are exposed to so many new topics."},{"name":"programming languages and translators","content":"I found Prof. Edward's sense of humor painfully annoying and his teaching rather scatter-brained. The topics he covers are all pretty interesting, though, and since the only other option for this class is Aho, I'd definitely go with Edwards.\nBy far the most educational part of the class was the project in which we had to create and implement a programming language in OCaml. However, learning OCaml was a bitch and made my team yearn at times for Aho's section (you get to use Java). Also, Edwards didn't really ground us in the theory well enough for us to create our own compiler until about 3/4 of the way in to the semester, which made the end of the semester hellish."},{"name":"operating systems i","content":"Real men take Operating Systems. And, of course, hard as nails women too. \nThis is by far the hardest class I've ever taken. The workload is about 30-40 hours per week on project weeks, almost none on off weeks. And there are like two off weeks. \nThe course itself, as in the things you get examined on, is actually relatively simple. There are two components: a concepts component, which you can get entirely from reading the textbook, and a practice component, which consists of endless hours of reading through C source code, followed by more hours of implementing your design, followed by a frantic 24 hour code marathon once you finally figure out what you were supposed to be doing from the start. \nSome prerequisites: Firstly, you need to know C really, really well. I mean like, you need to be able to write memory-safe in C in your sleep. You will be taught thread and interrupt safety in the course itself. \nMore importantly, you need to be able to read C code. There is no manual for the Linux kernel. It's C all the way down (well no, it turns into assembly at some point...) I mean, yeah there are some documentation notes, but the real deal is the code. If you can't figure out what a method is doing in one glance, you're going to have to brush up on your sight reading. \nOh and also, the projects are based around modifying the Android Linux kernel. I mean, how cool is that!"},{"name":"artificial intelligence","content":"I 100% agree with the reviewer from April 15, 2010, and the later ones.\nI really want to emphasize how insufferable the homework assignments are. The assignment descriptions sound straightforward and manageable, at first. It is when you start to work on it that you realize you know WHAT the homework means (that is all the lectures are good for), but not HOW to implement it. Most of the time will be spent figuring out how the program should work, even in a conceptual way, in order to achieve the algorithm that Pasik wants. \nThis is made harder because (a) You are using Lisp for probably the first time, a language that is not used anywhere outside academia and will never be useful to you again. No other language you have learned or lab you have taken in CS at Columbia will prepare you for understanding Lisp except the concept of recursion (b) You will not learn, during lectures, the Lisp you need to do the homework. After the first couple lectures, Pasik will not continue to teach Lisp and consider everyone a \"Lisp expert\" (c) You will spend hours reading Lisp primers before you actually work on the program. For this reason (and the fact that you have 3 other CS classes to worry about), the assignments will most likely lead to several all-nighters. Pasik has a 1-point-per hour deduction late policy, which is the most ridiculous policy I've ever come across in a CS class. If a student must resort to submit late, do you really think it will be by a couple hours? For a class like this, 25% deduction per day is much more reasonable.\nThe lectures are brief (usually they take Pasik 30 min to get through), with a focus on definitions instead of Lisp-based, example-driven concepts. Typically, a lecture will have one or two high-level examples (i.e. a diagram or graph), and one or two, if at all, slides of lisp code that do not relate to the homework in any way and will not be useful for exams.\nAs for the exams, I really didn't mind them. They are straightforward. However, each question is usually 1 point out of 10 points, so four points off already puts you at 60. Pasik will not tell you what questions will be on the exam. The best method is to read the slides carefully and focus on definitions. Also, there will be a lisp question on each exam that relates to the homework (i.e. a snippet of code from your hw)."},{"name":"artificial intelligence","content":"Prof Pasik has a very good presentation style, but unfortunately the AI material, he covers, lacks body. He uses slides, not more than 10-12, and you would have guessed that only some introductory and intermediate concepts are covered. He spends too much time on the philosophical aspect of AI; important it may be, but I would imagine that one lecture would have been more than enough to convey the message.\nProgramming assignments are to be done in LISP. And if one has good enough experience in programming, LISP shouldn't be too hard to adapt to. Good thing about LISP is you don't have to learn it all in order to get started. I did enjoy programming in LISP and assignments were engaging but not too difficult."},{"name":"programming languages and translators","content":"A word on Edwards. He would spend a good deal of time telling jokes that apparently he found funny. Humor can be a great teaching tool, but this isn't the Laugh Factory, it's a university. The topics covered in this course are difficult, and having to listen to the professor joke his way through his lectures is irritating and frustrating. As for his metaphors, I have heard people tripping out on drugs make more sense.\nIf you have no experience with functional programming do not take this course. Read up on lambda calculus and OCaml (which he has a huge hard-on for) before you even entertain the idea of taking this course with Edwards."},{"name":"artificial intelligence","content":"What's not to like about Pasik? He's a good teacher and a friendly guy. He's super patient and all kinds of approachable. If there's ever anything you don't understand he's more than happy to explain it to you. Unfortunately his office hours are practically non-existent, but he's always around for about half an hour before class, and for as long as you need after.\nThe course was taught in LISP, but if you're not familiar with this language, don't worry. He usually spends some time at the beginning of the semester explaining the basics, and none of the assignments require any really advanced level knowledge of LISP. If you get stuck, you can almost always find what you need with a little Googling. \nHis lectures are interesting and if you show up consistently and take thorough notes, you may not even need the textbook. Be warned, you will hear lots of stories about him and his family's zany adventures, but he's a good story teller and there's always an AI related moral in the end.\nAs another person pointed out, there is a lot of discussion about the philosophy of AI, but if you look up, you'll see that the name of this class is not Ã¢â‚¬Å“Artificial Intelligence ProgrammingÃ¢â‚¬Â, it's just Ã¢â‚¬Å“Artificial IntelligenceÃ¢â‚¬Â. The history and theory of AI are relevant to the course, even if they're not all that relevant to the grade. There will be some readings on this and probably one question on one test somewhere. If you decide to skip it all together it won't kill you, but it is interesting and might even help you out a little on the homeworks.\nThe assignments are deceptively complex, but they're not very difficult once you figure out what you're supposed to be doing. Give yourself some time. You're not going to bang them out in one night, but you can get them done over the weekend if you don't have much else to do.\nThe tests are sort of cumulative. It's usually around 3/4 new material and 1/4 old material. Expect a coding question, usually just a variation of something from the homework. He expects you to know all the algorithms by name so be sure you've go that down. Pasik will tell you himself that if you do the homework early you'll be pretty well prepared for the test and this is definitely true."},{"name":"introduction to databases","content":"Yes, his command over English is not the best. Yes, he does take digs at what students say if he doesn't understand them. But overall I wouldn't describe Biliris and this class as awful. His lectures are 2.5 hour long rambles, but not without comical interludes. His jokes are often funny, and he gives a ten minute break in the middle of class, which often extended to fifteen. Having said that, you can manage even without ever going to class, so apart from the few jokes there's very little value addition by his lectures.\nThe class material itself is interesting. It c, ould have been presented better (He reuses slides from several years ago, and doesn't even change the semester in the footer), but he has his limitations in teaching ability, and so you just need to make do with it. The four homework assignments are fairly easily. The projects can take time, but if your partner isn't completely lost, you can divide up the work and finish it over the course of a night. The exams are both fair, but of course, there's thinking involved, so it's easy to panic if things aren't going your way.\nIf you're not a CS major, I'd recommend to buy the book. His lecture slides are essentially a summary of the book, but there are some concepts that aren't very clearly explained in his slides. If you were sleeping in class (or absent, like I was), the slides will be of very little help in such instances.\nI can't say whether Biliris genuinely cares about this class or not, but he definitely gives the impression that he cares about the students. In our first class, he announced that we could call him up at any time before 11PMexcept if we were going through a breakup, in which case he said feel free to call me even after.\nIn summary: his lectures are pointless. But he's a nice chap. His material is interesting. The workload: not too bad."},{"name":"introduction to databases","content":"The material is easy. The teacher is acceptable. But be aware: your grades will depend a lot on how CAREFUL you are in following the instructions of homeworks/exams."},{"name":"user interface design","content":"The class is very well organized but the lectures are really boring. The assignments in this course are all based on Flash Builder with 3 assignments(2 individual) and a final project. The theory exams are totally theoritical. If you have a really good memory, you can do very well in the exam. Just read everything from the textbook as well as his slides thoroughly, as questions can come from anything: Be it a single line mentioned in the slide or rather a random paragraph from the tetxtbook."},{"name":"artificial intelligence","content":"If tl;dr, just scroll to bottom.\nOf the three CS classes I've taken so far at Columbia, this was hands down the worst of all of them. Prior to enrolling in the class, I read the reviews here on CULPA and figured that the people complaining about Pasik's teaching style and glossing over LISP and other concepts were simply whiners. It took me 3 lectures to completely reverse my initial opinion. Let me preface this review by saying that I'm not disgruntled because I did poorly in the class (even without the extra credit, I would've gotten an A). I'm bitter about enrolling in this class because it was nothing short of a waste of time and money.\nOver the course of the semester, I've come to realize that Pasik really doesn't put in that much effort into teaching. Here's why: of the 28 days that the class was scheduled to meet, 8 of them were committed to other activities (6 reviews, 2 exams). Of these review sessions, Pasik shows up to exactly one. While I thought the review session that he conducted was actually the best among all of them (probably because the subsequent reviews were horrific), he prepared no material and basically held an hour-long Q&A section. Moreover, he canceled one additional class, and ended at least 5 classes 20+ minutes early. So all-in-all, instead of using 28 days to teach, he effectively taught for roughly 18. The result of this is that we barely covered any material. A simple google search of Artificial Intelligence syllabi from top institutions like Stanford, CMU, MIT, etc, reveals that we covered about 1/3 of the material they did. And that's a generous estimate. I have one word for that: pathetic.\nOne aspect of Pasik's teaching that many of my classmates found irritating was the fact that he read directly off of his slides. In the past during my undergrad years, and even this past semester, I've had professors that used PowerPoint slides extensively. Sometimes, they even read off of the slides verbatim just like Pasik. This I have no problem with. What annoyed me the most was the dearth of content in those slides and how cryptic most of them were. This can be especially frustrating when some of the material he presents is not covered in the book, and the only source of reference you have is a figure of a rectangle with a few splotches of color that's supposed to represent the effectiveness of parallelism.\nFinally, a feature of Pasik's teaching that I found to be ineffective and even counterproductive was his insistence on going over code in class. I think the main problem with this is that code in LISP is not readable. The task of keeping track of what all the different built-in functions in LISP do in addition to the user-defined functions Pasik writes results in students being confused as everything becomes just one huge convoluted mess. I think that the time spent in analyzing LISP code would be better spent if the algorithms were presented in pseudo-code (mostly in ENGLISH) rather than actual code. Since the course is comprised of mostly grad students, converting pseudo-code to LISP code should not be hard once the students actually understand what the program is supposed to do. \nIs Pasik a nice guy? I wouldn't know since he has no office hours and is only transiently available before and after class. I stopped emailing him questions shortly after term started since his responses are one-liners and don't really answer your more complicated questions. Maybe it's because he's involved in many other activities that doesn't give him time prepare and do the material justice. I get it, professors are busy people. But there's a line between being a busy person and simply not giving a damn.\nBottom line: if your main objective is to get an easy A, this course is the one for you. If you want to actually learn something, take a different class."},{"name":"analysis of algorithms i","content":"You know how you imagined it would be supercool to actually learn algorithms from the S of CLRS? Well, its better than what you imagined.\nIf you want to learn algorithms from scratch, or just brush up the basics and then step into the more advanced Dynamic Programming / Graph algorithms, this is the class for you. Prof. Stein is extremely approachable, and very patient with the stupidest of questions. He will not take any Math background for granted. First few lectures can be boring if you know Big-Oh but he is really wonderful at motivating most of the \"magic\" behind the algorithms. Most of the assignments are difficult and you really want to get started as soon as they are out.\nMidterm was not too bad, if you had solved the assignments on your own and the final was downright easy.\nOverall, an extremely enjoyable class. Highly recommended."},{"name":"artificial intelligence","content":"This was probably the most fascinating course, which is saying a lot given that Pasik is the professor. Learned a lot but only because this is material that I hadn't been exposed to in other classes and I could have learned 3 times as much had Pasik not ended class half an hour early (on average) every class and skipped 8 classes for review sessions/midterms. Additionally, it should not have been required to learn LISP which wasted an additional 2 weeks at the beginning where we didn't learn any AI. He also cancelled a class at the end because he didn't have anything else to teach us. Overall, if you consider that he only used about 2/3 of the allotted class time, we had about 10 lectures on AI for the whole semester. How do courses at CMU, Stanford, MIT and Cornell manage to do fill a whole semester? \nAs stated in other reviews, all of his lectures are taken totally out of the book, except the knowledge representation lectures. In these lectures, rather than covering the interesting material on epistemic logic that the book had, he spent the entire time on algorithms for expert systems which haven't really been used since the 90s.\nHe also arbitrarily set his curve to a B-/C+ which would be fine except no other professor in the department does that.\nBasically Artificial Intelligence is an extremely interesting field and the fact that I am still interested in it despite Pasik is a testament to the material. However, if you can avoid Pasik, do so."},{"name":"introduction to databases","content":"Professor Gravano is definitely one of the best professors I've had. His lectures are clear, precise, and occasionally humorous. He's very receptive to questions in class and often responds to questions both via e-mail and the discussion board, which is rare in my experience.\nHe uses slides (available online) for much of the introductory portion of the course, but often switches to the blackboard to work out particular examples. The latter half of the course was taught almost entirely on the blackboard. \nCorresponding book sections are listed for each lecture, but going to class or having a friend to take notes for you is important, as he sometimes he covers more or less material than is presented in the corresponding book chapters. The textbook (Ramakrishnan + Gehrke, 3e) is quite good, despite the many reviews you'll find online saying otherwise.\nWhile you will get a project mentor for your two projects, in reality there will be very little interaction with the TAs unless you seek it."},{"name":"artificial intelligence","content":"AI with Creamer is completely useless.  I will admit that he tries very hard to teach the material and he is a genuinely nice person, but that will not dismiss the poor teaching and unfortunate organization of the course.  The homework assignments are theory based out of the textbook, which is supposed to be the bible of artificial intelligence.  That part is fine - besides for the part that the HW is pretty useless also.\nThe redeeming quality of this course was the final project - this is a matter of how much work you want to put into it:  time in = amount learned.  The examinations are also fairly worthless.\nI am sure that this course is easier than Pasik's course.  If you have any desire to learn anything, suck it up and take it with someone who is worthwhile."},{"name":"operating systems i","content":"Too much workload that equivalent to, or even more than the rest three courses I take this semester. Besides the endless projects, you need to review others' homework which also takes up much time. The grading sheet is really harsh, you never know what parts will be deducted points according to the grading sheet. The homework instructions are ill-organized sometimes, you were not clearly told what were expected to do in order not to lose points."},{"name":"operating systems i","content":"Your experience in this class will depend almost entirely on your team. If you come in with people you know and trust to be competent, you will be at a monumental advantage. If you sort into a random group, well... godspeed to you, brave soldier!\nThe professor's lectures were of extremely high quality, though the recordings are not. TAs were top-notch. The two books were, respectively, completely useless and extremely useful. You will be given problems from the extremely useless book, but should instead spend your time reading the book on kernel development for the homeworks.\n(45%) 6 homework assignments, lowest is dropped\n(15%) Grading on your reviews of peers' work\n(15%) Midterm\n(25%) Final\n(00%) Extra Credit\nNote: there were programming problems on the two exams."},{"name":"operating systems i","content":"Well, this is one course of Columbia of which I am proud of.\nThere is nothing compared to this course that Columbia can offer and I guess Prof Nieh is THE best person to teach operating system course.\nProf Nieh is great teacher and goes in great details whenever required. His classes are great, even if you miss in person, you can view them on CVN later. It was really helpful.\nIf you are lazy to work because you have a job already and just want to pass this course, then you might not like working so much, but otherwise if you have genuine desire to learn operating systems, you will be grateful to Prof Nieh.\nAssignments are challenging and you will spend time reading linux kernel code. Best resource to get help is good TAs. For our course TAs were really good and helpful. I spent almost few hours with them before doing any assignment and it helped.\nCool thing about this course is that if you do assignments on your own and are able to finish it, you will become good enough to answer any question on kernel that you are expected to know and even more.\nMake good teams for your assignment. If you have problems with team mates better change team, hire or fire someone else you will end up struggling alone and that doesnt help.\nJust remain above average in exams, assignments and your grades will be great. If you outdo  average in all cases you will get a very good grade."},{"name":"operating systems i","content":"A benchmark class, indeed. I am happy that I took it and improved my \"C\" programming skills, especially in the OS domain. Prof. Jason Nieh teaches the course very well.\nApart from the skills and experience in the areas - Operating Systems, Linux kernel programming, this course demands a lot of your \"C\" skills.\nIf you are a HardCore \"C\" fan and would love to experiment at system level in \"C\", then read on!\nThis one class is for those who crave for \"C\" programming a lot! You will get your hands dirty while building crucial features of Linux kernel on an Android device in \"C\" involving Synchronization, Scheduling, Paging, File Systems, etc(as per the projects in Fall 2012).\nYou will fine tune your \"C\" skills yourselves mainly in the area of optimizing the usage of the kernel resources in terms of memory. You keep an eye on what each function ends up returning to determine its success or failure - this comes with practice if you aren't in the habit!\nThe grading rubric is the most comprehensive one I have ever seen in my life. For each of the assignments/homework, the rubric would cover every nook and corner cases that a novice \"C\" programmer for Linux kernel would definitely ignore.\nWell, in the beginning you would find each of your submission being bitten by checkpatch, for not abiding by Linux kernel coding style. But, with time, your \"C\" coding style becomes smooth and elegant if you start respecting what that seemingly strict master(checkpatch) says, trust me!\nAh, userspace programs for each of the assignments! Well, I enjoyed much by dwelling in \"C\" while building the user space test programs for testing the Linux kernel features implemented in each of the assignments. You would be asked to demo each of the Linux kernel features you would implement in each homework and during the demo, well, how dedicated you were in testing your code gets rewarded when the standard test code(which they would have in their repositories) completes without any problem and you hear TA saying, \"That's cool!\".\nTAs were very helpful in answering the questions we had. Sometimes, we had to bug them and get the information what we want - but, they were all nice and had good hold on the subject. Among them, I found through live and piazza discussions, TA - Alex to be damn good in the subject.\nI feel it's important to mention that the solutions they would publish are simply beautiful. The solutions implemented by Christoffer Dall were mesmerizing. No, am not exaggerating at all - his coding style is so pleasing to eye and his code looks very simple and precise!\nPeer reviews: Yes, you would get opportunities(or responsibilities?) to review and grade other people's code. Here, I was annoyed at certain times of seeing some seriously senseless code from other people. At other times, I had also the chance to look at some brilliant code. So, overall, there was a good exchange of knowledge and suggestions between our team and various teams.\nYeah, btw, try to form a good competent team - believe me, it's better to have arguments and come up with some kick-ass code which scores beyond the average code resulting from an average interaction or no interaction at all between you and your teammates. And this is from my experience!"},{"name":"artificial intelligence","content":"This class was a huge disappointment. Stolfo manages to ruin a topic that is actually incredibly interesting and useful. His lectures are mediocre at best, his sample code is buggy and almost entirely in LISP, and no resources are made available to prepare for the midterm or final. If you find yourself enrolled in this course, I suggest you spend plenty of time with the textbook. It's far more useful than any other resource available here."},{"name":"artificial intelligence","content":"I would really avoid taking this course with Stolfo. The subject is fascinating, the programming can be fun, but his lectures are dreadful. Out of a class of 100+, only a handful of students even bothered showing up towards the end. \nThis wouldn't be a problem if we had a remote idea of what material we were responsible for knowing. We were given literally zero resources to prepare for the exams - no sample exam, no list of topics review, not even chapters in the book that would be covered. Multiple questions posted on Piazza about the scope of the exam were left unanswered. This is after not having a single written assignment for the entire course. There was exactly one programming assignment covering material from the second half of class, but it was due the week following the final exam, which is just bizarre.\nThe exams themselves are a frustrating joke - 40% of the material on the midterm came from 4 one-word answers (two yes/no), with no partial credit. Stolfo said this was because it made grading easier.\nIf you do wind up suffering through this course, I really hope you don't give a shit about your grade. The AI tournament is worth as much as the final exam, and involves students programming a game-playing intelligence and playing against each other. While it's a cool idea, 20% of your grade comes form how well your program does in the tournament. It's a single-elimination tournament. Meaning that it's possible to have the second-best program in the entire course, but if you get paired with the first-best program in the first round, -15 points for you (there's a five-point \"losers bonus\").\nNot only that, but half the class is grad students, and there aren't separate tournaments for grad students and undergrads. Meaning you could get paired up with a Ph D student who's been working on their algorithm for a month because it's the only class they're in. I don't know a single undergraduate who made it past the first round.\nI think the most frustrating part of this course is that all of the above concerns were brought to Stolfo's attention multiple times by multiple students - he seems to either not care or not listen."},{"name":"introduction to databases","content":"This class epitomizes the worst college class where you get a bunch of theoretical knowledge and NO application. We learned about functional dependencies within databases, and now I can show what a functional dependency is...but what is that within an actual database and how does this apply to SQL? We spent 2-3 lectures on the theory and underlying implementation of indexes....but didn't even touch how to actually create an index in SQL. We didn't introduce us to any of the numerous databases available (MySQL, Postgres, SQLite, ...) and had us play with a variant of an Oracle database that I'm pretty sure NO ONE uses in industry. And now I'm thrown out into the real world with a hammer and I have no idea how to use it. A month later I'll probably be nailing my finger into the wall by accident.\nBesides that, the professor creates slides that are basically copy-pasted from the textbook (and the textbook is horrible with typos, mathematical notation gibberish with no explanation, and no real-world application mentions). He hates taking questions, his TAs are half of the time absent from their OHs, and he obviously doesn't care about the class. I guess he's funny though (if you like \"haha wow I can't believe I'm sitting in this classroom funny\").\nIf you plan on taking this course I recommend the following advice.\n1) Never go to class, and just read the textbook.\n2) The textbook is horrible so find online slides, lecture videos, and other SQL/databases notes to actually understand the textbook\nWhat does this advice mean? Basically, if you take this class you will be paying a few thousand dollars in tuition to find and learn everything on your own."},{"name":"artificial intelligence","content":"I have never been more let down by a Columbia class....ever. Artificial Intelligence is supposed to be the most interesting field in CS. Programming robot intelligence? Learning about machine learning? Discovering how your video games are so smart? Nope, but we will spend half of the semester on depth-first search, breadth-first search and other search algorithms. And then Stolfo will skim past everything you actually wanted to learn in AI.\nThat being said, Stolfo is the sassiest professor I've ever seen and a blast to watch on x2 speed (online lectures!!). Laughs will be chuckled, but by the end of the lecture you'll have a faint idea of what he was talking about."},{"name":"programming languages and translators","content":"Really interesting content, not necessarily taught that well. Writing a compiler is an amazing experience, and if you start early, you should be fine. I went in with no functional programming experience, and really enjoyed learning OCaml and the functional paradigm. I'd definitely recommend the class: at the end you'll have written your own programming language!\nSTART EARLY, and really be selective in picking your team. A bad team will ruin the semester for you."},{"name":"introduction to databases","content":"Taking Professor Ferguson's section of Intro to Databases was such a mixed experience.\nLet me start with the good:\n- Professor Ferguson is awesome.  He has an interesting sense of humor which some people find sassy, but I love it.  He's also incredibly kind towards students, always willing to help, and is one of the most understanding professor's I've had.\n- He also holds an insane number of OHs, which is really helpful around due dates.  It feels like he has an OH whenever he's free.  He'll only announce them a couple hours in advance though, so you'll need to keep an eye on your inbox.\n- His section of Databases is a lot less theory-oriented, which means less time spent memorizing arcane definitions, and more time spent on working through real-world examples.  At least for me, that's a big plus.  And because Professor Ferguson has such extensive industry experience, it provides an interesting perspective that some other CS professors don't offer.\nThen, there's the bad:\n- Lectures are dry.  Professor Ferguson admits it himself, so he usually skims through 200 slides in 20 minutes, skipping most of the concepts.  His expectation is that you Google it yourself when doing the homework, but this means you aren't learning the content systematically.  Instead, you'll be scraping scattered tidbits off of the Internet, which sort of adds up by the end of the semester, but the learning experience ultimately feels unsubstantive and hollow.\n- Homework assignments are incredibly vague and disorganized.  If all the instructions and expectations were clear, they would be pretty easy (at least compared to other CS classes I've taken).  But I ended up spending days trying to figure out what we were expected to do for each question and obsessively refreshing Piazza for updates.\n- This would be fine if at least the instructions were consistent. However, the TAs, Head TAs, and professor often seemed to be on different pages.  For example, for a homework question, a TA's clarification on Piazza would be different from what the Head TAs explained during recitation, which would be different from what Professor Ferguson went over in lecture.  This was pretty common, and incredibly frustrating because now I needed to spend even more time attending multiple OHs and scrolling through Piazza to gauge the \"consensus among the TAs\", as strange as that sounds.  I also often had to rewrite my solutions whenever conflicting \"clarifications\" were made by different people.\nAll of this isn't to say that this is a bad class, it's just poorly organized.  At the end of the day, I think I would recommend it because I did learn some useful things.  However, just know that all the inconsistencies and vagueness will be incredibly frustrating and anxiety-inducing, especially if you are a perfectionist type of person.\nGrade-wise, pretty fair, not too bad.  Not really a factor you should consider compared to the stuff I've mentioned above."},{"name":"analysis of algorithms i","content":"One of the best classes I've taken at Columbia. Stein is a clear lecturer, and made all of the (already exciting) topics even better.\nThe homeworks were excellent. They were long and arduous, but you had sufficient time (two weeks) and plenty of office hours. I really learned a lot through the homeworks, and they prepared me really well for the midterm/final.\nIt's a huge class, so be prepared for other people to cheat, make noise, grumble, etc. Ignore it, and take the class anyways, because it's worth it."},{"name":"programming languages and translators","content":"This review is for Edwards and for the SUMMER version of PLT. There is no summer review of him on here so for those of you who were curious, read on!\nEdwards is, plain and simple, the shit. He is quite possibly the most organized professor I have ever seen. His website contains every class of PLT he has taught for the most part including old projects, slides, and documents. Furthermore, his notes are outstanding. In that regard, he has basically done all the work for you. The material is complex at heart but his notes and his descriptions in class make that material very easy to digest. Furthermore, it is evident in every shape and form that he absolutely loves and cares about the material. This man is among the nerdiest to ever exist and he definitely knows his stuff inside and out and forwards and backwards and I feel like he was very effectively in conveying this passion in his lectures. In addition to learning about making a language, you will also learn cool tidbits like C history, language history, or operational details you might not have known about various languages. Edwards is also a total language hipster and spent the first day of class openly trashing Java, C++, and many others (he called Perl an \"abomination\"). Therefore, if you are waiting for his endorsement of the \"cool and underground language you haven't heard of, maaaaaan\" then you will find it with OCaml (more on that in a second).\nThe summer class had two homeworks which were both incredibly easy. The notes will tell you everything you need to know and he doesn't pull any cheap shots; if you pay attention in class and understand the notes then you will be able to breeze through the assignments.\nHowever, the homeworks are only 10 percent of your grade. A whopping 50 percent of your grade comes from a massive project wherein you have to make your own programming language. The other 40 comes from the final exam (no midterm) which, while a little tricky, wasn't too bad.\nThe project itself MUST be done in a language called OCaml which I had never heard of before taking this class. OCaml is quite possibly the most annoying language you will ever use if only because it has the most frustrating and nitpicking compiler I have ever seen......but the good news is that most of the time once it compiles then it works the way you want it to. Personally, I prefer to write code that blows up, analyze it, and then fix it (and isn't that the purpose of test suites anyway?) but you will have no such luxury with OCaml. Furthermore, it has very unhelpful error messages; it is fairly difficult to ascertain the problem when the only indication of what you did wrong is something like \"Syntax Error\" or \"Expression was 'a * 'b * 'c but was expecting type 'a * 'b list\" (and what the fuck exactly is a 'b list?!?!? I just finished the class and I still don't know). If you thought \"Segmentation Fault\" was bad just wait until you get a load of this. Still, Edwards makes the point that OCaml is an easy language to write compilers in and once you start getting good at it you will see where he is coming from. The language itself is fairly powerful and you can do quite a lot with only a few lines. As annoying as OCaml was I am glad that we had to use it if only to a) learn a new language and b) gain the new perspective and discipline from programming in it. It is also interesting to learn a new language when taking a class dissecting what makes a language \"good\".\nSTART EARLY ON THE PROJECT. The class is 6 weeks long and goes by faster than you'd ever believe. My team and I were pretty good at staying on point throughout but I can very easily see how the project can be a nightmare if you wait until the last minute and doubly so if the team hasn't practiced with OCaml. There were other teams demoing with barely finished languages who appeared to make that mistake; don't let it be you.\nThe only complaint I have about this class is the time we spent covering Prolog. While it is an interesting language to learn about, I don't know why he spent the time he did covering unification and searching considering AI is already a class here. This part of the class seemed completely out of place and irrelevant next to anything else we had done all summer. There was even a Prolog question on the final exam. It seemed rather pointless to have this question on the final, which is supposed to test my knowledge of programming languages and translators, covering an AI topic and making it worth 10 points.\nLastly, a word of warning: Edwards is a very direct person and is quick to criticize or otherwise shoot down your ideas for your project. Don't take it personally. At first he hated my idea too."},{"name":"introduction to databases","content":"The WORST professor ever. His accent made the lectures hard for us to understand. Besides, when we tried to ask questions most of the time he wouldn't answer that but made fun of us. His class was totally not helpful. You could read the slides by yourself and don't have to waste your time going to his class. You'd better check if your teammate could follow up otherwise it's likely that you will understand nothing in his class. The curve is bad, many people had got C's."},{"name":"introduction to databases","content":"Personal idea, this course should be considered as one of the simplest course for grad level, especially when you are in your last semester and want to spend more time on job hunting, or when you are dealing with other heavy courses like OS... Besides, 4111 now is a core! Should it be core earlier, why bothering get trapped by OS. (Holly #@$@$#!, although I admit one can really improve a lot by taking OS.)\nYeah, prof. has an accent, but you have textbook, read it! After all, databases system are not designed to confusing people. We are not at Kindergarten and need to be instructed with everything. The projects are not that hard. The homework are easy. The midterm and final are OK if you know what you've learnt throughout the semester. You don't really need prior experience with databases. Last but not least, firms do pay attention to the relational databases project you are working on, understand the project and explain well during an interview, it will land you a full-time job or internship. Of course, we have a lot of new generation databases like cassandra, MongoDB, etc. The relational database, however, just like ball pen, simple but remains powerful."},{"name":"user interface design","content":"User Interface Design w4170\nI took this course in my first semester as a grad student. And I learned how well coffee does at keeping you up. Most people doze through his classes or do their own work and he doesn't seem to mind that. Some lectures do get interesting but mostly there's not much interest generated by the professor.\nBut the assignments are really cool. Most of them use some form of APIs along with javascript and you get to build pretty neat stuff. You can look up the previous year assignments and projects. And you do see that there is some common sense required while building UIs and the common mistakes to avoid."},{"name":"analysis of algorithms i","content":"Well the professor doesn't really add much, but the course is a must itself. It puts you in a position where you need continuously keep solving his assignments. And there are a lot of them. One of the advantages we had was that Aaron Bernstein, his PhD student, was TA ing and he was really helpful in clarifying a lot of stuff. He might be late most of the time but he makes a lot of effort to explain stuff. He even helped solve a couple of assignment questions.... :p\nThe course doesn't cover any DataStructure though."},{"name":"artificial intelligence","content":"I had AI with him. He is the least organized instructor I've ever had. He believes everything he said was right and is extremely vague on assignment instructions. He would make up tons of extra requirements about the projects in addition to the project instruction posted online and you wouldn't know them unless you keep track every post he answered on Piazza. The exams are unfair in the sense that he would test on very trivial points and if you don't know them, you are screwed. Never take any course with him."},{"name":"artificial intelligence","content":"I took this class with Prof. Jonathan Voris.  I'm pretty sure he was roped into teaching the class right before the semester started, if that's worth anything when considering this review.\nQuick Summary:\nGood lectures (if a bit dry; depends on your taste)\nRanges from very approachable to completely unapproachable\nDoes not deal well with grades.  \nProf. Voris was a good, solid teacher.  He taught the material well, and was mostly light-hearted about the material.  He really seemed to enjoy the class when he took it (7 years ago I think), and he definitely transferred that joy over to teaching it this time around.  I liked his lectures, though sometimes they were a bit dry (often the material was at fault).  Basically, Voris is a good teacher.\nHowever, Prof. Voris comes with a special type of schtick.  The best approximation of an explanation of it is a mix of ego and paranoia.  When it comes to grades, he seems paranoid that every student is willing to kill him if that will give them a better grade.  This is not (much) of an exaggeration; he really is paranoid about this.  When it comes to anything involving grades, simple questions offend him like the deepest of insults, and he is completely unreasonable.  When handing out the midterm, after failing to get students to come up in an alphabetical order, he just dropped all the tests on the table, and sat back, calling the students \"animals\" and \"disgusting\" while everyone searched through the mess to get their tests.  Not cool.\nAlso, if he can't understand a question, he often assumes that the question is stupid, and sometimes even worthy of mockery.  He will always try to explain a question once, but if the explanation is not sufficient for the student, and he thinks that it was, he will make comments like \"I don't understand what's not to get.\" or \"This is pretty simple.\"  He is in desperate need of learning the phrase \"Why don't you come see me after class?  I'll explain it then- we should move on\".\nThis ambiguity often translates to the workload- the projects were good, but the formatting was often unclear.  Tiny details that made actually finishing the damn things a nightmare.  To be fair, many students just seemed to ignore what was actually written in the project assignments in regards to submission details (\"Must run on a CLIC machine\" seemed to be an oft ignored instruction for many students).  All in all though, the details just needed to be crystal clear, and they weren't.\nHis midterm and finals were VERY reasonable.  However, the grading of them weren't.  He hasn't posted our final grades, so it is unknown whether he will curve or not, but some of the ways he took off points were pointless.  The purpose of a test is to test our knowledge of the material, not our ability to decipher certain cryptic instructions.  The questions were good- they were actually really good tests.  But, like I said, the grading was off.\nAll in all, he was good for learning the material, and terrible for anything to do with grades.  Just a bit of a nightmare to deal with the schtick.  Not a bad person, just not adjusted to teaching (yet).  If he shapes up on the grading thing though, he could definitely be a really great prof. in the future!"},{"name":"artificial intelligence","content":"Didn't learn shit. This class was terrible. A buggy script determines your grade for the coding portion, and the professor just reads off the slides that she got off somewhere else. Recitations were mostly not good either, with most TAs being bad, but there are some exceptions."},{"name":"artificial intelligence","content":"After reading the rather poor reviews of Professor Stolfo's AI course, I was excited to take the course with his postdoc.  Unfortunately, he failed to meet expectations.\nVoris is a very nice guy, but was disorganized during his lectures.  Also his command of Common Lisp wasn't the greatest, and used code from Stack Overflow in his slides.  Thankfully, he only required Lisp for the first assignment.\nThe assignments were a little much.  I found that I was working on the implementation more than the actual search algorithms.  I spent weeks working on the game implementation for Gomoku and Sokobon, while rushing through the search algorithms hours before the assignments were due.  Also, he provides the easiest test cases possible, while using hard ones to grade.  Most of my assignments assignments passed all of the test cases, but I ended up doing poorly on them because the test cases used for grading were not even remotely as easy as the examples he provided.\nThe reviews from Stolfo's class mostly say that he skims over everything interesting in AI.  Voris wasn't much different, and we actually covered less material than Stolfo usually does.  We didn't even get to machine learning, and our last assignment was on logic, entailment via forward and backward chaining (which I thought was an extremely boring project that again, takes more time to write the implementation than the search algorithms).\nThe midterm was fair, but the final was rough.  Voris said that chapters 1-9 would be on the final, yet he ended up testing us on topics mostly before the midterm.  We did not receive any sample questions or past exams, and were unsure of what to expect on the exams.  I though the final was way to long, and Voris said he had planned to make it even longer.\nWe used Piazza as our forum for discussion and questions outside of class.  To be fair, some students did ask questions that could have been easily answered from a quick google search.  But that doesn't mean the instructor should respond to them in a sarcastic and demeaning way.  Some of Voris' answers to Piazza questions were very defensive and sarcastic, including \"Uhh, you can run Eclipse on the clic lab machines?\" or \"I only posted the text file with puzzles because people complained I didn't post any examples\" and \"Guys, I've already made it rather clear that all of the material in the book chapters that we've covered is fair game.\"  He also would write something like \"please see me in office hours if this is unclear\" rather than post a response.\nBasically all the course material (lecture slides, etc.) was given to him by Stolfo.  There were mistakes in the slides, and he usually correctly them quickly.  Although I did hear him arguing with a student about ambiguity in a final exam question and Voris' response was something like \"[Stolfo] has been using these slides for 20 years and I don't think he had this much trouble with grade arguments.\"\nOverall, I guess Voris was a better choice than Stolfo, but if you aren't required to take this class, I suggest avoiding it like the plague.  At least Voris made the tournament extra credit, and all who participated earned at least 5 extra credit points, even if they lost in the first round."},{"name":"artificial intelligence","content":"Jonathan Voris was hands down the worst professor I've had in the Computer Science department (although I suppose I use the term 'professor' lightly here, because I believe he was a post-doc who was teaching Artificial Intelligence for the first time), and among the top 3 worst professors I've had at Columbia (which is surprising since he speaks perfect English).\nThe Good:\nThe first day, I was rather excited to be taking this course, because Artificial Intelligence is a subject of great interest to me, and I was pleased to find that Dr. Voris was very enthusiastic about the subject matter, and the first three introductory lectures, while sometimes rambling, were at least engaging. \nThe Bad:\nUnfortunately it was all down hill from there: it became incredibly difficult to determine what information from lectures was relevant. As a result more than half of the class stopped attending lectures (Voris began giving pop quizzes in class around 3/4's of the way through the semester).\nThe Ugly:\nProgramming Assignments: The programming assignments were long. I mean incredibly long. The assignments consisted of single page pdf files describing a task in vague detail. There were no suggestions for completion strategies (fine, you don't get these in real life) but more frustratingly, there was absolutely no framework given. The projects often required large amounts of infrastructure (e.g. coding of 5 search algorithms) before any part of the conceptually interesting portion of the assignment could be tackled (algorithm design, heuristic/evaluation functions). Voris was a hard-ass about deadlines, which is reasonable, although perhaps less reasonable was his choice to assign the 4th project and the in class final due 4 days apart. \nExams: The material on the exams was not very difficult, however the exams themselves were incredibly confusing. The midterm was almost as if he had never before written an exam, for practically every question it was difficult to tell even what the question was asking. On top of this, the TA's couldn't answer questions because only 1 of them could speak reasonable english, and the Professor refused to answer questions because he might give away the answer. The final was in class on the last day, and the questions were more clear, however the exam itself was pretty long and somewhat tedious in nature.\nMiscellaneous: The professor, in my opinion, had a patronizing tone throughout the class and routinely treated students as if they were stupid. On top of that he did very little listening and a whole lot of talking when students expressed their concerns. No review or example materials were provided for any assignments or tests. And, more of an annoyance compared to the rest of what was going on, the Professor would often engage in pointless discussions (read: arguments) with students about a very specific point of no importance that would last for 10-20 minutes.\nJonathan Voris is clearly knowledgeable and passionate about Computer Science, but in no way qualified to teach this course.\nOne Caveat: I don't know how much he changed the material from Professor Stalfo's version of the course. It is possible that the assignments and lecture notes were entirely the same. This does not change the fact that Voris was an insufferable asshole, who seemingly refused to listen to his students and insisted on wasting class time on pointless and pedantic arguments with students.\ntl dr: Course was horrible, Professor was horrible. If you value your time and sanity I recommend you steer clear (although I don't know if it is being offered again, so it's probably a moo point.) I give this course a 1/10."},{"name":"analysis of algorithms i","content":"This class is definitely one you should take for the following reasons:\n1. The book is very good and the teacher, who helped write it, is very good at describing the chapters intuitively.\n2. The class covers a lot of material and, as a person without much of a background in CS theory, I really learned a lot.\n3. This class really gets intimate with the particulars of certain algorithms and you leave the class with a sense of what works where and why. At least I did, anyway. The problem sets you will be solving reinforce this way of thinking, as many problems ask you to devise an algorithm and you will get a lot of practice of what \"pieces\" to use in the \"puzzle\".\nJust about any CS concentration will find something to use from this course and in general just provides some good information.\nThere are still problems with this class:\nFirst of all, it seemed like everybody was cheating. The average on every assignment was always absurdly high and, given the challenging nature of the problem sets, seemed too good to be true. It was almost as if the people who did the work honestly were punished for doing so. No less than six times in class did I witness a student in front of me pulling up the solutions on his/her laptop. The same problem extended to the midterm because it was take home. You weren't supposed to collaborate but people did anyway. Seriously, Google \"CLRS 3rd edition solution manual\" and let me know what you find in the first result on the first page."},{"name":"user interface design","content":"Feiner seems to be passionate about user interfaces. His lectures, however, betray this notion because they are extremely boring. I found his assignments to be great tools for learning Javascript and how to interact with APIs. The final was ridiculous. He basically asked random questions about anything from the lectures to the grossly large amounts of assigned reading. If you wish to do well on his exams, MEMORIZE EVERYTHING, otherwise you are screwed. I find it to be of poor taste when professors give assignments and exams that are completely unrelated and that rely, not on applicative knowledge, but pure memorization. He seems to be a man of habit, so I'm not counting on this ever changing."},{"name":"analysis of algorithms i","content":"I agree with the previous reviewer on almost every account.  I just want to elaborate on how some of the administrative details.  I ultimately really enjoyed the course and learned a ton.  That being said, IÃ¢â‚¬â„¢m hesitant to recommend it to anyone who is taking it just because someone told them it might be a good idea.  The workload is too heavy to undertake the course out of casual interest.\nUnfortunately, with an enormous class size, the course had a heavy focus on evaluation without much benefit.  The class had all the symptoms of a cash cow class for the masterÃ¢â‚¬â„¢s program.  For the whole semester (except on days when homework was due), there were students filling every seat plus the stairs of the room.  The first time homework was handed back at the front of NWCB 501, the entire class fought like idiots around the tables to get their papers as quickly as possible.  Eventually, I realized that getting my homework back was pointless, as each problem rarely had any information other than the score I got on the problem.  If the score was something in between full score and no credit, they often wouldnÃ¢â‚¬â„¢t even bother to underline or cross out the mistake.  This is a great way to give grades really quickly, but not much else.  These problems extended to both the assignments and the exams.\nThe professor gave a speech on the first day about the academic honesty policy, and how using the internet to help us with the homework is not allowed.  He said that violations would be treated harshly, and that there are no exceptions this policy.  He even implemented a policy to encourage us not to waste time writing anything for problems we did not know how to solve, which was to award 3 points out of 10 for leaving the problem blank.  That all seemed fine on the first day, until you realized that nobody gave a fuck and they were all just gunning for perfect scores, regardless of how they attained them.  The bottom line is that any incentives to prevent cheating were completely unsuccessful.  Yes, people who were honest were inevitably penalized. \nThe fact that such excessive amounts of this took place makes me question whether the expectations for the class were unreasonable.  I think most people thought to some extent that the workload was too heavy.  I think the workload did detract from learning for many students.  Yes, this is a class where doing the homework requires significant insight beyond what is presented in the lectures; this is a good thing to a certain extent but sometimes it went overboard.\nUnfortunately, the exams didnÃ¢â‚¬â„¢t necessarily do a good job normalizing for who was most sincere in their homework assignments.  I've been in classes before where people who cheated on the homework got killed on the exams; this was not one of those classes.  The main reason for this was that the midterm was take home (and obviously everyone collaborated).  This exam was a great deal easier than the homework assignments, but the expectations are generally a rather unclear, and the grading was much harsher than homework assignments.  Also, many of the more difficult theoretical problems did not really have anything to do with the exams.  Basically, the problem sets were so extensive that the exams werenÃ¢â‚¬â„¢t representative of how well students understood the assignments.  For example, much of the beginning of the course and the first two homework assignments are devoted to developing mathematical techniques, but none of this comes out on the exam.\nFinally, I think there should be some coordination between this class and data structures.  To put it bluntly, data structures here is a complete joke.  I think every undergrad in the class couldÃ¢â‚¬â„¢ve benefitted from some attention to the more advanced data structures.  IÃ¢â‚¬â„¢m not saying this because the background was necessary or even helpful for the material we covered."},{"name":"artificial intelligence","content":"I have mixed feelings for this course. My final grade is satisfactory but I'm still quite disappointed with the course. AI is supposed to be a fun class, and there are plenty of interesting topics that can be covered in a semester long course. However, at the end of the semester, you would find what you had learned was just a bunch of search algorithms plus some machinery that helps you play with logic expressions. I think if Professor Voris had spent less time(or none at all) on giving pop quizzes, explaining the solutions to the pop quizzes and reiterating some of the petty uninteresting concepts, he would probably have had time to cover some more interesting and important topics such as  reinforcement learning and applications of AI in robotics/vision/nlp, etc. But I gotta say this is the first time Professor Voris have taught the course and he did try to teach the course as best he could. He did not come across as a sloppy instructor, it's just that he needs to gain more experience in teaching."},{"name":"analysis of algorithms i","content":"Prof Stein is a genius. He is witty, has pretty good lecture slides, and explains them in a very thorough manner. This course was taught 'alongside' Prof Andoni's Analysis of Algorithms 1 course, and twice this semester Prof Stein couldn't teach and he had Andoni fill in with his own slides. After experiencing both professors, I can confidently say that Stein is much more concise, thorough, and more familiar with the material. I mean, he is a co-author of the textbook...\nAs far as workload, there were 6 problem sets with the lowest one dropped. These took a substantial amount of time if you actually go through the process of thinking and devising/modifying algorithms to solve them (the alternative is to google them and either find the solution posted or something similar that you can pull off as a sort-of answer). Two midterms for 25% each, and one final for 35%. First midterm I did terribly, second I did average, and final I also scored average. On the homeworks, I started off scoring 2 SD's below median, and slowly worked my way up to the median/above. Constant and steady improvement is definitely key, as I walked away with a B. \nThe material is challenging, but office hours are helpful. Reading the textbook is a must... especially if you miss class, you have everything you need to know in the textbook. Stein follows it perfectly, and it is written in the same language he teaches in (duh! he wrote it!), so its easy to follow along.\nThis class was extremely helpful for interviewing. I took it Fall 2019, as I was applying to full-time CS roles. Definitely helpful for analyzing runtime, using algorithms, modifying algorithms, optimization, etc. I recommend taking it, the topics taught in this class are extremely helpful to someone looking to be a good programmer, engineer, algorithm designer, etc."},{"name":"analysis of algorithms i","content":"First off I enjoyed the course and think Prof. Stein is an excellent teacher. His lectures do a good job of explaining some very dense material and he also is engaging and manages to keep a relatively light tone despite the large class size. He seems well prepared and obviously is a master of the material. Sometimes when you take a course where the teacher is also the textbook author you might as well just stay home and read the book; however with this class Prof. Stein manages to add a lot of value despite covering mostly similar material to the book. The book itself is pretty good too although occasionally too terse.\nThe material itself is critical to any advanced CS study - either research or advanced development - and so I would recommend it to anyone looking at or already in grad school or who wants to get a highly competitive job at a top company. That said, if all you want to do is get a decent entry level CS job this material is more challenging than what you need to know.\nSpeaking of challenging material the class is VERY hard. Primarily this is due to the HW. With one or two exceptions each of the seven problem sets is extremely long and difficult. And (as has been pointed out) cheating is rampant. If you want to get the mean or better without cheating be prepared to invest at least twenty hours on each HW.\nI actually thought the midterm was great. Since the questions were brand new you couldn't cheat from the internet and so I felt the long hours I put into it were rewarded with a good score above the mean. This is in contrast to the HWs where no matter how hard I worked I generally got an average grade.\nI also thought the questions on the final were fair although I was surprised at my grade (which wasn't bad but wasn't good either). C'est la vie, you can't win them all. Certainly the questions on both the midterm and final are easier than on the HWs.\nOverall I loved the class although I think it would be even better if they reduced the amount of HW and used easier questions written from scratch each semester so people couldn't cheat from the internet. I do understand this would be a lot of work for the staff. As it stands right now hard work on the problem sets will help you learn the material very well, but can be frustrating due to sheer volume and the fact many people cheat/collaborate.\nCurve seemed fair to me but I haven't discussed grades with anyone else in the class. Overall TAs seemed pretty good. Some logistical hiccups (not nearly enough seats in lecture hall, HWs returned via huge pile/mad rush method) but generally grading was quick. Feedback on Piazza questions a bit skimpy but not bad.\nTL;DR - really enjoyed the class overall, particularly the rigorous material and good lectures. Prof is high quality. Have mixed feelings regarding the huge HWs. Textbook is relatively good."},{"name":"operating systems i","content":"Hard but not as hard as everyone says. Not very enjoyable but I've had worse classes. If you are a strong programmer with experience in C you will probably do well. If you are a weak or inexperienced programmer you are going to have a bad time. The class could be greatly improved if they reduced the focus on android hacking and emphasized concepts more. The good, mediocre and bad:\n---The good:\n- Professor Yang is well-intentioned and prepares for lecture\n- All class notes and materials are easily available on the website\n- Expectations are clear\n- Problem set portions of HW are pretty straightforward\n- Very fast Piazza response\n- Midterm and final are reasonable and open book\n- Exposes students to research (via required paper reading referenced in both lectures and tests, and via frequent observations by Prof Yang during lecture about what are current research topics and how previous topics were explored over time)\n-QEMU/vx6 combo is clear and good to learn from (unfortunately only used in 1 of 6 HWs)\n---The mediocre:\n- Modern Operating Systems textbook is a bit out of date and loaded with thinly veiled opinions, although it's not bad\n- Lectures try to pack way too much material in. Luckily they aren't very relevant, since you can pretty much learn from the slides (and watch portions on CVN if needed) so you don't need to actually go in order to get decent grades on midterm and final. Much of the lecture material is irrelevant to HW and tests \n- Some of the TAs' attitudes to students are borderline insulting (although others are good and very devoted on Piazza)\n- A lot of students seemed very upset about the grading/curving on Piazza at the end although personally I thought it was fine. Prof is reviewing results in response to the outcry (as I mentioned above, it seems he does actually care about the class, even if some aspects of the class are problematic)\n- Group projects. Ugh\n---The bad:\n- Largely useless programming assignments that generally amount to copy pasting and then hacking up existing kernel code. You spend much more time wrestling with various dev tools, resetting your tablet for one kernel crash after another, dealing with complete lack of kernel debugging tools, etc than actually learning OS concepts. The class should really be called \"android hacking\" instead of \"operating systems\"\n- Way too many technologies/tools involved. QEMU emulator, vx6 code, linux kernel code, adb, x86, ARM, complex macros, makefiles, gdb, git, android bootloaders and VMWare just off the top of my head. So again you wind up getting bogged down in tool specific details and spending way too much time on that rather than fundamental OS concepts\n- Extremely slow grading\n- Little relationship between HW (both code and prob sets) and tests\n- \"Interactive\" code grading sessions with TAs. They are intended to encourage fair work-sharing among group members but do nothing of the sort. TAs are not comfortable dealing with the students in person and in fact just skipped doing these for latter HWs\n- Kernel development textbook is bad. Hardly any actual code examples to show how one might add features to the kernel. Mostly high level overviews that are only partially accurate and copy-pastes of comments and headers from existing kernel code (which you can look at on your own without the book)\n- HW4 (scheduling) was painful. Much much harder than other HWs. They let students drop one but they should just get rid of this HW since almost everyone winds up dropping this one anyway and it is by far the worse offender in terms of being useless kernel hacking. Spent the most time on this one, learned nothing I didn't already know and ended up dropping this grade anyway. ADVICE: If you take this course and ace the first three HWs don't even waste a single minute on this one"},{"name":"artificial intelligence","content":"The rest of the reviews are pretty accurate about this class but I figured I should add in a bit to just explain Prof. Voris. Let me start by saying Prof. Voris is a terrible human being and might be one of the worst people I have ever met. He would often belittle students for asking questions related to class material or about class policies. His assignments were based off what we learned in class with the majority of the difficulty coming from the insane amount of fluff put on top of them. Like he gave us games to encode a solver for and I must have spent 1% of the time on the solving algorithm (the important part of the assignment relevant to the class) and 99% of the time dealing with the absurdly detailed rules of the game that had no reason to exist beside to waste our times. Now back to the real problem Voris. Every time a student asked him for something, like if he could post the blank midterm online after we got it back so we can study it for the final, he would answer in the most demeaning way ever. Every question he felt was a personal attack on himself. Now I am by no means a psych major, but I would say he had a huge fear of being seen as inferior. He would oftentimes go on rants about how in his college, which is some local school that most people have never heard of, he had it so much harder and how Columbia students were entitled and a bunch of cheaters. This rant about how much harder he had it occurred so many times and he would constantly belittle Columbia students as a whole. He clearly was trying to somehow prove his superiority to a bunch of kids who never saw him as inferior in anyway. All I can say is that he has some deep issues and probably would be better suited to teaching at a community college where he does not find the need to always defend himself even if the students are not attacking him. My favorite example of him being an ass if when he was trying to hand out the midterms and basically put them all in one giant pile in the front and told the students to come get it. Of course everyone got up and was gathered around the table. Now what does Voris say? He starts repeatedly yelling (for like 10 minutes straight) \"You all are animals and you should be ashamed of yourselves! I never saw this when I was in school\". He clearly has no idea what he is doing and I hear Columbia is looking to hire a real AI teacher (Voris can't teach very well either so this is a good thing) so hopefully he will never teach a class again. But Voris if you are reading this please go see a Psychologist you have some issues that need to be worked out."},{"name":"analysis of algorithms i","content":"This was definitely one of the best, most rewarding classes I've taken at Columbia.  \nWhile the huge size of the class was definitely not optimal, Stein has mastered the art of teaching a large class.  The class definitely covers a lot of dense material, but the instructor did a great job picking out the important ideas without getting bogged down and trying to cover every last line of the textbook.  He's without question one of the best lecturers I've had at this school.  I know that often taking a class from the author of the textbook can mean that lecture notes seem like copies of the textbook, but that is not the case in this class.  I found his presentation a bit friendlier and more streamlines than the book, and he was also quite funny and brought great energy to the class.  The book could be terse, but it was definitely helpful to refer to after lectures for more details.\nAs people have mentioned previously, the workload is intense.  Each of the seven homework assignments are incredibly long.  I don't think I've ever spent so much time on homework assignments for a class.  I learned a ton from completing them, but they definitely could've been a bit shorter without compromising much value.  With that in mind, this is definitely not a class to undertake lightly.\nThe exams were much more straightforward than the assignments, and if you put a lot of effort into the assignments, it would be reflected on the exams.  It was very frustrating that so many people cheated on homework assignments for perfect scores.  I don't really have a good answer to this, as I too was very frustrated by it.  Seeing as this happened, giving a take home midterm might not have been the best idea.  The grading seemed fair to generous, especially for undergrads who were curved separately."},{"name":"operating systems i","content":"So Jae taught this course in Spring 2014 because the normal OS professor was on leave. I'm not sure when he will teach the course again, but I wanted there to be a CULPA review so that people can go into this well-informed.\n--- The Course ---\nI learned a ton from this course, though I didn't necessarily realize it as I was slogging through. Jae reformatted the course and taught it with undergrads in mind, which was appropriate given that the class had many more undergrads than in past years (no doubt because of Jae's popularity). As such, much of the first half was actually an extension of AP (lab7/http-server) used to teach OS concepts such as concurrency, memory sharing, and inter-process communication (user space programs to teach kernel stuff). It again demonstrates Jae's theory of teaching, using previous knowledge in order to bridge the gap to new concepts. With regard to content, Jae put a great deal of time into UNIX programming compared with hardware knowledge / kernel hacking. Jae explains that the earlier stuff is more applicable and the latter stuff is changing (e.g. we didn't cover hard disks, probably because SSDs sort of shift that paradigm). I buy his explanation. The pacing of the course wasn't great, with probably too much time spent on UNIX programming on the front and too little systems/kernel work at the end. Of course, this is understandable given that this was Jae's first time teaching OS and that he completely restructured it.\n--- Homework ---\nA few individual assignments (that are pretty easy) with mostly group projects (up to groups of three). Having a good group is obviously helpful. All the projects run on Arch Linux, which you will set up on VirtualBox. The assignments usually didn't involve much coding, but rather a lot of understanding how the code runs and scouring the internet. In other words, frustrating yet also good practice for the real world. The assignments have good underlying structure, but still need refining (again, should get better over time). Sidenote: the listserv from AP carries over as well, and will save you hours of struggle if you follow closely.\n--- Exams ---\nI got destroyed on the midterm, but in hindsight it was one of the best crafted CS exams I have ever seen. It definitely tested your ability to read code and apply the concepts we learned. The final was very different and a bad evaluation of our mastery in my opinion: 25 multiple choice questions about very specific things we covered (i.e. very un-Jae-like). Both exams unfortunately do not provide room for partial credit.\n--- Lectures ---\nNot incredibly interesting, but still important to really ingrain the material in your head. Jae mostly worked off of powerpoints, which I found ineffective. The few times he used the board were better. For me, printing the notes/slides beforehand and taking notes directly on them worked best.\n--- Grading ---\nJae curved to a high B+, which I consider pretty generous. Just be very VERY careful to follow homework instructions exactly as stated. Lots of times grading occurs on scripts, so the slightest problem could send your grade down just for not properly following basic instructions.\n--- TAs --- \nJae carried over the best AP TAs and I assume he would do so in the future as well. There was also a contingent of Chinese grad student TAs who were friendly, but generally less helpful.\nI doubt I've covered everything, but hopefully someone after me can fill in any missing gaps. On the whole, I would say to take the class with Jae if you are an undergrad (and if he ever teaches it again)."},{"name":"analysis of algorithms i","content":"Xi is a pretty decent teacher. Going into this class, there were no previous CULPA reviews on him and the only thing I heard about him was that he was \"not bad\". I would say Xi's a bit better than \"not bad\".\nTypically, classes like Algorithms go really fast, leaving most students lost and confused. Xi is good in this sense because he teaches at a slower pace so it's easier to understand the long proofs and sometimes dense material. The drawback of his speed is that we didn't finish the syllabus. We missed 2 classes because of snow days and another 3 classes because Xi was overly ambitious to cover so much material at his teaching pace. He also posts excellent slides online so you don't have to worry if you missed something in class.\nThe class itself is pretty hard. The book CLRS, while excellent, is quite dense and detailed. Homework was almost completely assigned from the exercises in the book, which are nearly impossible the solve. The HW averages were pretty high (around 55/60). This is because solutions to problems from CLRS are available online if you search carefully enough. I highly recommend you don't do this since you will get screwed come exam time. Xi is super helpful in Office Hours and you should go to him if you get stuck on HW (because you will, trust me). He will walk you through any problem and give you an outline of the solution. Sometimes, the problems are so hard, that Xi himself can't solve them on the spot (not knocking on Xi; he's really smart. I'm just saying the problems are that difficult). \nThe midterm was much easier than the problem sets, but still far from easy. One question on perfect hashing which worth 20 points could be solved only if you remembered a proof from his lecture slides. Most people didn't get it, so remember to read his slides thoroughly. Grading was fair, maybe a bit strict.\nFinal was similar to the midterm in difficulty and was a bit longer, but you had 3 hours which was plenty of time. I thought the final was easier, but I ended up getting a lower score on it than the midterm, so I don't know what to make of it.\nThe class had roughly 8 undergrads out of a 100 students, so be prepared to be lonely. There are PhD students in this class, so don't expect to ace it, though getting an A shouldn't be a problem if you put the effort into this class. I'm not sure if he curves undergrads separately.\nOverall, it's a good class. You will learn a lot and become much better at constructing solid proofs and thinking algorithmically. I think Xi is just as good as Stein, so feel free to take this class with him."},{"name":"introduction to databases","content":"Really excellent overall professor: clear, well organized, understanding. If you're interested in DB he is a great choice of prof"},{"name":"artificial intelligence","content":"Radev's a jovial guy and a decent teacher. However, I didn't learn much in this class since Radev focused a lot on useless topics. We literally spent 60% of the class studying logic of some sort. I would rather have learned more about search algorithms and machine learning. Radev coached the International Linguistics Olympiad team so he's a big fan of linguistics and it shows in his teaching. He spent a lot of time talking about gramamars and outlining NLP at a highly impractical level which I really hated. I think you can learn more about AI by taking a MOOC online from Coursera or Udacity.\nThere are 4 programming projects which are all very time consuming. He gives you 2 weeks for each and they take at least 6-8 hrs. There's no upper limit since you can improve the assignments as much as you want in an effort to get the very generous extra credit (up to 20 points on a 100 point assignment that counts for 20% of your grade). Only 2 of the projects had anything to do with AI. The first one was to be coded in LISP which has the dumbest syntax ever - it's like a poor man's Haskell with a lot of parenthesis.\nAll in all, can't recommend taking this class since it doesn't really cover much. Radev's a nice guy and probably the best teacher for AI you're going to find but the class itself is pointless.\nTests are ok. If you read all the slides you should be fine. If you understand all the algorithms and definitions, you'll do great - there aren't any questions that require a lot of thinking and being clever. He just test how well you know the material. Be warned that some of the slides kind of stink in which case you might want to refer the textbook. Don't waste time reading the entire textbook like he asks you to - it's just a scape goat for him to ask you anything he wants and for you to not complain that it wasn't covered.\nGrading was decently generous. He added points on the midterm and final since the average wasn't as high as he wanted."},{"name":"programming languages and translators","content":"Stay away from Edwards, go with Aho. Edwards recommends Aho himself. Also, Aho's famous because he's the A in AWK and wrote the Dragon book. The only thing you'll miss in Aho's class is Edwards' sense of humor.\nEdwards is the snarkiest, most sarcastic, immature professor you will meet in the CS department. He tells some really great nerdy jokes and his Facebook wall is hilarious since he belittles all his students publicly on it, but I don't recommend taking his class. Don't ever email him with an excuse or stupid question since he will publicly shame you (name removed though) on Facebook.\nI didn't learn much in the course. The material was pretty straight forward, nothing really complicated like you would see in more theoretical CS classes. You sort of get a high level understanding of how a compiler works and that's about it. If you did most of the work for your project, you will learn more mostly by reading on your own to save your project and not because you learned anything from this class. \nHis exams are reasonably easy but the problem is everyone gets high scores. The median on the midterm was like a 94. If you screwed up even a little bit, you were done for. You don't have to know all the material in the slides - most of it is to build the compiler. He posts review slides the class before the exam. You just need to know the stuff on them. Check out the last semester slides on his website to peek ahead. Grading was harsh and he often cuts points for really dumb reasons. Make sure your HW is perfect if you want a good score.\nThe project is KILLER. In all likelihood, you will fail if you don't assemble the Avengers to be your team. Make sure you put together a strong team which has time to commit to this project. The project is structured such that one person (the most responsible or the least busy) always ends up doing over 50% of the work. We've looked at other groups and previous teams and this is the case through out. I think Edwards should take a look at this and somehow fix the project so that it's more fair.\nSome tips: Start early!!! Get the scanner and parser out of the way quickly. You can copy most of them from last year's groups and just modify them to your liking. He doesn't really teach you enough to write the compiler till 3/4ths of the way into the semester but don't wait for that since you'll get screwed. Semantic checking and code generation take a ton of time to complete. Start early and be sure to pester the TAs for help. Also, half of you team will be slackers and you will lose all faith in humanity. You just have to deal with it.\nHe doesn't make expectations on the project clear at all, so I'm going to break it down for you here. You need to turn in your proposal 2-3 weeks into class. Get started with the scanner and parser ASAP. Then turn in your language reference manual which says what your language will look like. Then code up the rest of your compiler and put together some tests. Our group ended up writing 70% of our language during reading week and finishing the slides for our final presentation and the project report during finals week. Needless to say, my other exams got screwed in the process."},{"name":"artificial intelligence","content":"I took this AI class with Ansaf. I like her teaching style and her class. She focus on the searching algorithm and machine learning for most time which are quite interesting to me. It is not easy to cover all the machine learning algorithms in less than half semester so that she taught a little bit fast in the machine learning part. The after class studying will be necessary if you want to grasp these algorithms. I also like her homework. She have assigned four homework, all programming in python. Most of them are very practical problem(for example to program a AI for 2048 game) and some of them are very challenging. \nIt is hard to say the importance of this class to me. Honestly I expect more in this class because firstly I have taken machine learning before and I want to have a systemic understanding about how to build up an AI. But after taken this class, what I have learn and what I can understanding is not clear enough. I cannot say that I have a clearly and systemic understanding about how to build up a practical AI. Maybe it is because the artificial intelligence is a quite wild field that cannot be cover by only one class in one semester. If I can arrange the topics in this class, I will set this class as a higher level class and the machine learning class should be required before this class. Then the professor may discuss more in AI rather than take most of time to discuss machine learning and algorithm. \nAll in all, Ansaf is a quite instructive teacher. For those students who haven't taken machine learning before, this class is very useful and you can learn a lot in this class.\n(written by Z.H.)"},{"name":"artificial intelligence","content":"Prof Ansaf is very friendly and the class was interactive. There was a good balance of traditional AI topics such as agents, search algorithms, CSPs and logic with a focus on machine learning in the second half of the semester. The prof mainly used her slides but there were some chalk board sessions as well. The slides were very well prepared and Prof Ansaf takes you through the math in a very simplified manner. The slides are sufficient and the text book can be used for any reference reading.\nThere were four assignments and all of them had Python programming. Basic programming knowledge is sufficient for this class as Python is easy to pick up. There was a Python recitation taken by one of the TAs in the beginning of the semester and it was very helpful to get started. The assignments were interesting (application of AI to games like 2048, mazes etc) but time consuming - as you can keep trying to improve the performance of your program. Definitely the best way to understand the intricacies of the algorithm though and the prof was kind enough to give additional time on the assignments when required. There were a lot of opportunities to score extra credit if you needed to catch up on a bad performance. We had one quiz and a lot of suggested reading material if you were interested. The course covered a lot of topics - AI and ML related. But the midterm and final were both open notes so you could focus on application rather than memorizing formulae or algorithms. The exams definitely made you think but as long as you understood the content it, the problems were solvable. The final grading formula was very generous and took the best performances into account for most students.\nThe TAs were helpful during office hours and on Piazza. Especially close to exam time, the response time of the prof on Piazza was great which helped a lot.\nThe professor balanced heavy course material with lighter \"historical moments of the day\" and current events in AI which made the two and a half hour class easier to get through. We also had a guest lecturer in the last class. All in all the professor really cared and took great initiative to give us more information than strictly the course content and made the classes more fun."},{"name":"programming languages and translators","content":"This is one of my favorite classes at Columbia. This is one of the very few classes where both theory and application of computer science comes together. And the manner in which Professor Edwards teaches this class is incredible. Professor Edwards is very organized and well prepared for lectures. His slides are very comprehensive and lectures are very clear. On the side note, he also brings in \"Stephen Colbert\" style humors in class which can be quite entertaining at times.\nThe project is the centerpiece of this class. It allows you to build a programming language on your own from scratch. This can be a great experience because you are dissecting every component of the building blocks of a modern programming language. \nMuch has been written about OCaml which is the language used in the project. But half way through the semester, everyone realizes that due to its very important features like pattern matching and strict type referencing, OCaml is simply the best language for building a programming language in a semester long period. There is also a huge inventory of past projects done in OCaml in the class website that can be very useful reference. Some people who had taken this class with Professors other than Edwards often ran into challenges due to lack of resources and reference materials. \nI highly recommend taking this course with Professor Edwards. Make sure to find  good teammates and make use of past projects as a guide. You will end up with a great project and your own programming language. The things that are learned in this class such as project management, teamwork, testing, leadership have applications for rest of the CS career."},{"name":"analysis of algorithms i","content":"Professor Drinea is a solid pick for Algorithms I and she has taught for the past two spring semesters. Here is what you are in for:\nLecture--\nProfessor Drinea is an okay lecturer. I had some trouble understanding her sometimes because of her accent and the fact that she is somewhat soft spoken. This was exacerbated by the horrible acoustics of the classroom (Mudd 833). That being said, she is quite good at explaining things, though you will need to review some content afterwards (as well as do some reading prior to lecture) to learn the maximum amount. All slides are posted on the course wiki.\nContent--\nWe covered a ton of content this semester (and according to my roommate, more than most Algorithms I classes cover). This included increased coverage in Linear Programming, P/NP Reductions, and a bit of Approximations. There was also a hackathon early in the semester that went over applications of various algorithms for those of you who are more programming focused.\nHomeworks--\n6 assignments that ranged from really easy (graph algorithm pset) to crazily difficult (dynamic programming pset). They are due every two weeks.\nExams--\nClosed book midterm and final. Midterm was incredibly long and difficult. Final was more reasonable length, but still pretty difficult. Averages were pretty low.\nOffice Hours--\nTA office hours are a mixed bag. Sometimes TAs don't know the answer to questions or have trouble explaining it. Being able to speak Chinese with them is actually a huge plus. Professor Drinea is very helpful in her office hours, so definitely go to her. On the whole, these are very important for succeeding in the class (unless you are absolutely brilliant).\nGrading--\nVery reasonable. I slacked the first half of class and finally picked up my game in the latter half (went to OHs and lecture). After all was said and done, my scores were a tick below the mean and I ended up with a B, so the curve appears to be the standard B/B+ for mean."},{"name":"user interface design","content":"Tip for the Final: shallow understanding of concepts would not work, make sure to read the papers and spend hours fully understand them. Three of four projects involve HTML, CSS and JavaScript."},{"name":"introduction to databases","content":"Professor Gravano is an excellent lecturer. His lectures are very clear, and he does a good job of answering questions. He is also very friendly and helpful during office hours and maintains an active presence on Piazza.\nThe only thing I didn't really enjoy was that he recycled some of the old databases lecture slides, which are sometimes unclear (his own lectures are much more helpful). Definitely show up to class, since the textbook, while helpful, contains more than you need to know and the slides are not very helpful on their own. Also, he offers homework and project grace late days which, while helpful, were not always allowed to be used on certain homework and project parts, which kind of defeats the purpose in some way.\nDespite my nitpicking, Gravano is still a great professor!"},{"name":"operating systems i","content":"Have mixed feelings about this class. Took AP with Jae many years ago and can say that it was significantly better run and more structured than OS. He seemed much less prepared to teach this class. The content wasn't terribly interesting. We spent a lot of time on UNIX APIs and not enough time kernel hacking. It was an 8:40 am class so no one really showed up. It didn't really matter since Jae would just talk about a couple of functions from a man page for an hour any way. Most of the learning is done on your own by reading many chapters from 3 textbooks.\nThe first midterm was poorly written and essentially required you to know random facts from the textbook and didn't really test conceptual thinking. The second was slightly better but still overall not a great test.\nThe HWs were hard. Required a lot of reading of man pages, kernel code and experimenting. Doing it on your own was a miserable experience that led to many sleepless nights. Always felt pressed for time on the group projects. I never felt intellectually challenged by any of it but did feel like it was a lot of worked. There was never an aha moment where I appreciated the beauty of an operating system. It's just a mangled mess that we deal with since that's how some bloke decided things should be done many decades ago.\nEnsure that you form a good team. They don't have to be incredibly smart, just very hardworking, sincere and accountable. Mine didn't do any work which led to a lot of incomplete homeworks since it's kind of impossible for one person to finish the HW on their own unless they're willing to devote well over 10 hrs/week to it.\nOverall, I was slightly disappointed in this class given that I thought AP was fun and easy. Jae needs to step up his game here. You might want to take the class with Jason Nieh who is an OS researcher and will focus more on kernel programming, but be warned that his workload is even worse. I do think that every CS major should take OS. It's surprising that Columbia doesn't make it a requirement. That said, I begrudgingly took it.\nTAs for this class were great fwiw. A+ to them for their hard work."},{"name":"analysis of algorithms i","content":"I have mixed feelings about this course. It repeats a ton of material from Data Structures, more or less on the same level. There is some new material, but it doesn't feel like a semester's worth. Overall, the material was not particularly interesting. I guess you learn all the standard algorithms you should know: the theory of divide-and-conquer and greedy algorithms, then some classic sorts and graph algorithms. \nThe lectures were fine. A little slow, but presented reasonably. The slides are online, which is nice, and the textbook is pretty standard. The level of rigour was adequate.\nHowever, the homeworks were painful. The problems themselves were not hard, but the TAs were brutal. They often complain about a supposed \"lack of rigour\". In a good math of theory class, you're supposed to write however much you need to show what you know. But in this class, you're supposed to write however much you need to show a toddler how to do it themselves. This felt like a waste of time for the students and the graders.\nThe exams were graded much more forgivingly, though."},{"name":"introduction to databases","content":"I think Biliris is a fairly strong professor and, given that it was a 2.5 hour class, I enjoyed it as much as I possibly could. As with all professors he has his pros and cons.\nBiliris is a ball or energy and a personality in the classroom and undeniably cares about his students. He responds to questions on Piazza fairly quickly, made a point to get to know people in the class. He even joked that we could call him if going through a breakup. \nHe is very energetic and enthusiastic about the material and the examples, and he tends to be good at making things quite simple, so the combination is good. He also continually involves students of the classroom. He will ask for suggestions on how to solve something, ask someone else to point out flaws, etc. This keeps the room fairly engaged for a class that is 2.5 hrs long. \nBiliris welcomes student questions in lectures and will always stop to answer a question before moving on. This both a pro and a con. Sometimes I feel like the class got stuck because we would keep harping on an issue that was either not extremely relevant or simply repetitive. However, the good news is that, if you are willing to raise your hand, you will always walk out of class knowing what is going on. Unfortunately, Biliris sometimes either struggles to understand a student question or misinterprets the question. As such, you have to be persistent with rephrasing till he understands the question, at which point he usually does a solid job of answering.\nThe workload is quite light. There are 4 light homework assisgnments, two projects, a midterm and a final. The first project is significantly more in depth than the second, but the time allocated for the projects reflects that. The midterm is exactly the same in structure as the practice midterm, which makes it easy to study for. No practice final is given, and the material was harder and more technical, so make sure to spend time on Query Optimization when studying for the final. \nHis grading tends to be fairly generous in my view, and I think the level of CS ability in this class is lower than most other CS classes, since it is required for OR undergrads and many masters students seemed to come from weak data structures backgrounds (we spent 30 minutes discussing the complexity of a hash table). Overall, assuming you go to class and pay attention, this is a low workload class apart from projects and exams."},{"name":"introduction to databases","content":"Maybe Eugene Wu is a good professor or a good researcher, but apparently not a good teacher. He always makes simple things confusing in his class. There are many times I couldn't get his points. But after class, I always get handle of those puzzle quickly by searching related info in Google. Many of my classmates faced the same condition. Therefore I don't recommend this professor."},{"name":"operating systems i","content":"This was hands down the hardest and most time-consuming class I have ever taken at Columbia.\n It was also my favorite. \nIf you really enjoyed AP and think you would enjoy getting into the nitty gritty details of Linux, take this class. \nJae is a good lecturer, but it seems that he is still figuring out how to teach operating systems, so his lectures are not as great as his AP lectures. Still, it shows that he put a lot of thought into the way the class and assignments are laid out. I found the order of the material to be pretty natural and easy to follow, but I'm sure the syllabus is still changing every semester as he figures out how to teach this class. \nAlthough I found the lectures and readings easy to follow, my team and I really struggled with the homeworks. However, I'll admit that part of the reason that we struggled so much was that we did the readings right before the tests rather than before attempting to do the assignments. So, if you want to make your life easier, do the readings before you get down to coding. There will still be some shooting in the dark involved, but not nearly as much as if you only rely on your knowledge from the lectures. \nThat being said, what made the class truly enjoyable was having an amazing team. None of us knew each other before OS, but we became close friends by the end of the semester because we were spending close to 40 hours/week with each other for this class. It seems like an exaggeration, but I promise its true. We got pretty decent grades on most assignments, but we made very little progress on other assignments (despite the crazy amount of hours we dedicated to working on them). \nThe tests are classic Jae-style trickiness. The curve was pretty generous though. \nIf you are interested in the material and aren't afraid of some hard work, go for it. You are only at Columbia for so long, and you can get a lot out of this class."},{"name":"operating systems i","content":"Given the last review for Professor Nieh was written in 2013, I figured it is worth to share some more thoughts on this class.\nThis class is everything they say it is. Nieh will teach you everything you need to know about Operating Systems, and then some more. His lectures are fast-paced, dense and sometimes difficult to keep track of. However, he is a very good lecturer with an impressive command over the material. He will answer several questions during class, which sometimes gets frustrating as he digresses. If you pay attention, you will learn a lot, but you will often have to back up the concepts with the textbook to actually master the material.\nAnd then there are the homeworks. Oh God. Nieh will talk about the concepts in class and he will talk about the homeworks a little bit, but to be honest, you are all alone. They involve writing code into the Linux kernel. Not only do you have to read A LOT (I mean, A LOT) of C code to figure out what you need to do, you also have to be really good at C to actually implement what's expected of you in a reasonable amount of time. Expected to spend 10 hours figuring out what you actually need to do before you write a single line of code. Expect to actually skip homework on other classes to finish these assignments. They will make you a great coder (especially if you want to be a systems programmer), and you will actually master reading Linux source code by the end, but it's a ridiculously rough patch. You will also have to demo your completed homework to a TA after it is done.\nHere are the breakdown of each of the programming assignments:\n   - Writing a bash shell. This one is the only individual programming assignment and also the only one not involving kernel programming. It is probably the easiest to do, but it'll still take around ~10 hours to finish. I see this more as a weed-out assignment for the students who aren't as confident in C.\n   - Writing a system call to keep track of Android's interprocess communications. This is the first time you will write code for the Linux kernel and also the first time you will write a system call. It's not actually that difficult, but takes a lot to get used to the programming environment.\n   - Writing an interface that sleeps selected Android processes and makes them wait on designated light intensity levels. The main emphasis here is concurrency / synchronisation. Starting from this assignment, you will actually be using a physical Android device, which Nieh makes you buy. Expect to pay a total of $200 as a group of three. \n   - Writing a process scheduler for Linux. This is easily the most difficult assignment in the class. Most of the teams actually didn't do it and dropped the assignment. My team spent over 30 hours and still got a failing grade. I'd still recommend you to attempt it, since you may be tested on the homework.\n   - Exposing process memory to the user. This is the assignment that has to do with memory and paging in Linux. Conceptually can be a pain to figure out, but it's not actually a lot of lines of code. There are some weird Linux-related bugs which slowed us down, so expect to find hacky ways around them.\n   - Writing a file system for Linux. This wasn't that bad because the TA's set the homework up pretty well, but just like all the other homeworks, it's again a lot of time.\nDon't expect the grading to be nice because the homeworks are hard. We were constantly tested on weird edge cases that we didn't think of. Nieh expects the highest of you despite how difficult it is to even set up the groundwork for a lot of these assignments.\nTA's: Some are very good and some are very bad. Don't expect office hours to be helpful, they are overcrowded and if there are students scheduled to demo their homeworks, you won't get to even ask questions.\nTextbooks: There are two. One is very helpful for programming for the Linux kernel, especially early on. The other is helpful for the written components of the homeworks and for studying for the midterm and the final. If you could get one, get the Linux programming one.\nBoth of the tests are also difficult, with class averages around 50-60 percentiles. You may be asked on anything you did for this class, from the lectures to the homeworks.\nFinally, grading is OK with a mean around B+, but you leave feeling it could be more generous given how much work and patience this class expects of you to even get a score around the mean. Despite all of that, if you do your work, you will learn an incredible amount about operating systems, C, Linux, systems programming, concurrency, and even more."},{"name":"programming languages and translators","content":"Professor Edwards is fantastic. He is engaging, funny, and extremely smart. This was a really great class, and I learned a ton. That being said, the project is definitely a ton of work, so start early! The material that you learn in class doesn't help much with the project itself. So, don't worry about starting the project before you feel like you learn the relevant information in class, because you likely will learn the information way after you need to already have applied it to your compiler."},{"name":"operating systems i","content":"Disclaimer: AP has been my favorite class at Columbia. \nThe word around the street is that Jae is not as good in OS as in AP but I think people who say this are being unfair. Kernel hacking and OS theory are by nature tougher beasts. There is no easy way to approach the material without severely watering it down. I found AP to be more enjoyable but only because I never felt lost. Yes there were some frustrating debugging moments but I always knew the path the success. OS was different. I felt completely and utterly lost multiple times while doing the hws. I questioned my love of coding, my humanity and my sanity, all while cussing out this class and the kernel documentation. Jae thrusts you into the wild with just the basic necessities (the roadmap for HW7 was generous and appreciated) and we were forced to find our way home. Some can consider this bad teaching. I think of it as tough love. It was necessary to push you to the next level. AP was for teenagers, OS is for adults. Once I became more comfortable with the kernel and its ways (around HW7), I found the class just as enjoyable as AP. Overall, great experience. I only refrain from ranking OS among my favorite courses since I am pretty sure it gave me PTSD. Maybe in a few years I will look back at OS with endearment. \nThe tests....They are much worse than AP's... coming from a guy who got 100 on the AP final. The T/F and multiple questions are really impossible to prepare for. Although the curve evens it out, I think it doesnt give students who've mastered the material a good opportunity to shine. \nIf you loved AP, you'll love this class. You learn a ton. Some example HW's were building a scheduler and a filesystem for Linux. \nI maybe would've liked if Jae spent more time on OS theory and less on Linux specific stuff."},{"name":"artificial intelligence","content":"As a senior, this is possibly one of the worst classes I have ever taken in the Columbia CS department. Full disclosure: I got an A in this class, so this isn't just whining.\nProfessor Ansaf is super nice but incredibly disorganized. She never showed up to class on time, and every class had \"technical issues\" that would last the first 15 minutes of lecture time. Furthermore, when she would teach, it would be rushed and very high level, when what you needed to know on the exams and homework were much more detailed. Again because of her disorganization, the first half of the class was very laid back - there was very little work and only two homeworks. Then, for some godforsaken reason she decided to assign homework 3 (the 2048 game, in my opinion, the hardest homework because of the necessary optimization problems) and have the midterm two days apart. It was endless sleepless nights because the homework took so goddam long and so did studying for the midterm. Her practice exam was only slightly helpful, and neither were her lectures for the midterm.\nSide note: her exams don't test knowledge. They test speed. The midterm exam was absolutely ridiculous because it had about twice as many questions as were possible to answer in that time period. It was super frustrating, especially since none of the students knew that coming in, so a lot of people absolutely bombed that exam when we actually knew the content. When I went to talk to her about it, she said she wasn't going to help because everyone was graded on a curve. Okay, thanks for that nonexistent help. \nFinally, the last half of the class was incredibly rushed, because she realized she hadn't taught any of the topics she needed for the homeworks. So instead of giving us time for the assignments by spacing them out, she instead gave us an assignment every week. The homeworks are incredibly time-consuming (because you always have to optimize over and over again) so you barely had any time at the end of the semester to do anything. Finally, the final again was ridiculous. \nAll I can say is that I hated this class. Professor Ansaf was disorganized and there were only 1 or 2 TAs that were actually helpful. In essence, take this class only if you're prepared to learn everything on your own, and get no support from the professor besides a curve."},{"name":"artificial intelligence","content":"Before I write this review, I would like to preface it: Professor Ansaf is probably the nicest, most committed teacher I have ever had at Columbia. She was incredibly personable, and always had time during her office hours to help or chat. \nSo...I didn't think this was a good class. I know a lot of seniors took this class because it was supposed to be relatively easy where you still learned a lot. Unfortunately, neither of those were true this semester. This could be because this is the first time in two years that this course has been offered, or perhaps because she (very nicely) expanded the class to 275 students, so there was less one-on-one time with instructors. As it was, the Professor would show up late (despite her best efforts) every class because of a meeting directly prior to class. That's unfortunate, because it means the first 5-15min of class were used for setting up instead of lecturing. I think if the Professor knew she would be teaching a class at 1:10pm, she should have scheduled her meeting for another time (or vice versa). \nAdditionally, the class was incredibly disorganized. The homework instructions were generally incredibly vague and because of that on Piazza there would be -- I kid you not -- 50-80 unanswered piazza posts during homework times. The homeworks were also badly managed, as they were more rushed in deadlines towards the end of the semester. Also, there was a time where a homework was due the same time as the midterm, which was incredibly distracting and in my opinion badly managed. Considering how much time the homeworks took, it was relatively disorganized schedule-wise.\nThe exams weren't much better - instead of testing the actual content of the class slides/lectures, they tested your speed in problem solving. If you're able to do each problem in about a minute to 5 minutes you'll be fine -- but that was not typical. If you take the exams, I recommend that you first focus on the highest weighted problems first -- aim for the max points in the least time, not about going in depth. The practice problems are good for general formatting, but not on timing. If the professor had added more practice problems for exams I think that would have helped. \nFinally, the TAs were generally useless. Of the about 10 TA's, all of whose office hours I went to, only about 3 were consistently able to answer my questions and help me on my homeworks. Jimmy/Ruicong was the best TA so I hope he stays on if this class gets taught again. \nIn general, I wouldn't take this class again. I didn't feel like I learned anything, and the homeworks were just implementing algorithms in a really convoluted way."},{"name":"analysis of algorithms i","content":"Done with final, feel I have the right to write the review. \nFirst, let me say: \nProfessor Xi Chen is so CUTE! \nIn terms of the class, as people reviewed before me, he is rigorous about proof. He has pre-made slides, which could have some typos, but his lectures can be a little different. He is a good lecturer and very helpful during OH. \nAlgo I covers a lot of topics in just one semester. If you think it's an upper level data structures class, then I want to tell you it's much more than that. It's like C++98 to C++17. I just want to say that we really learn a lot of different algorithms and the proofs about their correctness. \nThe problem sets are mostly exercises from CLRS, our textbook. Some problems on them are doable, some are not (not for me, sad). I had to go to OHs to figure out where to start for some of the homework problems. Midterm and final are about the same difficulty but midterm was given shorter time. \nI'm not sure about grades, but the amount I learned is enough for me to not care. Although there are much more master students and a few PhDs, I think the number of undergrads taking this class is about 20. Very happy :)\nSome advice:\nread the textbook; it takes iterations (for me) to understand things. \ngo to OH if you can; TAs are totally amazing, they see a problem and they solve it already. \nstart the problem sets early because they could literally take 20+ hrs to do; I typed in latex which takes time too. \nWho might enjoy taking this class: love solving puzzles, when you get to know some underlying reason of how this works (usually related to math) you will get excited, can find connections between different concepts, want to rigorously prove something, etc. \nPrereq: I was doing okay without CS theory, but I would consider discrete math a must."},{"name":"analysis of algorithms i","content":"The worst Analysis of Algorithms class you can take. She grades really bad, and even \ngives F to some people.\nShe teaches easy concepts in the class, and makes HWs really hard. Mid-term and final are way harder than the HWs.\nGrading--\nShe will tell initially, she will grade on a curve and everyone will be fine. But in the end, she will mess you over. She grades absolute. I know a \"lot\" of people who got a C in her class. She grades the mean as B-."},{"name":"programming languages and translators","content":"Professor Edwards is an awkward turtle, but likely one of the best lecturers I have ever had. This course is a heavy amount of work, but I can't imagine someone better to inspire a passion for programming language design as well as compilers (although he himself recommends Aho). \nLike everyone said before, the final project is a monster, it's really the whole course in one project. That being said, this is one of those classes where almost all the theory you learn in lecture can be directly or indirectly addressed by the design and coding of your project. \nEveryone says to pick an amazing team, which if you are like me and took the course your first sem in Columbia, is like saying try really hard to get lucky. Nevertheless, whoever your team may be, it pays off to work on your project incrementally and try to get everyone involved as early as possible. In the end, I think he mentions almost all projects get good grades although you'll have to work hard on yours. \nTL;DR: Take this class if you're really interested in the subject matter. Not a good class to tack on for a GPA boost or to check off a requirement."},{"name":"introduction to databases","content":"Absolutely do not take any course with this professor. He is incredibly nice, but his lectures are awful. I attended every lecture, but the slides are all completely useless and this class could be better learnt through youtube tutorials. The coursework is extremely light, with only a couple of homework assignments and a final project. The problem sets can take a little while, so don't push them off until the last minute.\nHis grading is extremely brutal and his exams don't accurately reflect the course. You're going to have a lot of graduate students with database experience who are going to slaughter the exams, leaving the worst curve I have ever experienced. Many of the people I knew in this class received C's or below despite performing at a seemingly decent level throughout the semester. It all comes down to how well you do on the midterm and final, which are not easy at all.\nAlso, Biliris extremely unapproachable. I attempted to talk to him about a grade and he ignored me for a long time, and then told me that he can't give out all good grades and there were too many advanced student who took the course as a gut class. Overall, worst experience at Columbia by far and I would avoid it 100% if you can."},{"name":"user interface design","content":"Boring lectures, outdated material, slow grading, unrelated exam, unforgiving curve. Take these into account when signing up for this nightmare of a course. The lectures use outdated technologies presented on the most milktoast, text-riddled slides you will ever see. Feiner was extremely unorganized to the point that he never assigned homework 3 and then allocated those points to the final project and exam: both of which were rushed and poor reflections of actual student learning.\nThe only way to even hope you can pass the final is brute memorization with zero application of course concepts. The first homework is a solid way to learn API interactions, but the others are just awful. Wait until another professor teaches this course, you seriously won't regret it. I was able to pull a B+ in this class because I took essentially the same course in undergrad, but many of my friends fell in the C-range despite actually being pretty good in the class up until that point.\nOverall, just don't."},{"name":"user interface design","content":"I would not recommend anyone take this class with Feiner if it's not for a major requirement. However, it looks like it's being taught with Lydia Chilton this spring, so it might be worth it. She was a guest lecture this past semester, and was really enthusiastic and engaging.\nAs you can probably tell from the other reviews, the lecture is extremely dry and covers a large number of UI studies, with almost no relation to the assignments. While it may be extremely painful, and no one else does it, going to lecture helps with remembering the seemingly random theories/studies asked about on the final.\nHow to do well: For the assignments, remember that the most important thing is that your application meets Nielsen's Ten Usability Heuristics (and if they were coding projects, that they work). For the final, I picked out ~50 theories/studies from the lecture slides and memorized summaries of them, which worked out well."},{"name":"programming languages and translators","content":"Edwards is very prepared and cares a lot about the students, the course, and his TAs. He is engaging, funny, and not monotonous, but nevertheless his lectures are a bit awkward and hard to follow. That's because he mostly just verbalizes the symbols on his slides.\nE.g. If there is an arrow from A to B on a particular slide, he would just say \"x moves from A to B\".\nTo improve his lectures, he could repeat what he is trying to get across more times (so we can have time to think about why x would move from A to B, and be able to more easily do problems of that sort) or actually elaborate on the reasons behind the actions that happen on his slides, to students."},{"name":"artificial intelligence","content":"I learned a lot in this course. \nI didn't really know much about the theoretical underpinnings of AI and in the semester I took the course (Spring 2017), we went through a bunch of unsupervised/supervised learning techniques. The lecture slides were very good and I found her lectures also quite understandable. \nI thought the exams were quite fair as well, with the Midterm being a bit long but still doable. The Final wasn't cumulative so the amount of material to cover in both tests is actually reasonable. If you go through the lecture slides, you should be fine.\nThe assignments were a different animal. I really underestimated how much time the 1st assignment would take, which was a lesson I learned the hard way (I basically spent Friday-Sunday writing code all day). The 2nd assignment was frustrating because your entire grade was based on 10 test cases (and I thought the times I ran tests on my own computer, I scored better). Thankfully, the last three assignments are definitely easier and took me way less time.\nOverall, I'd say it was a pretty good introduction to AI. The curve seemed to be fairly forgiving based on the grade I got."},{"name":"introduction to databases","content":"The professor was pretty good, he tried to add humor to his lectures but his accent was a little difficult to understand. He is overall a nice guy, probably your average professor. However, the TA's are horrible. If you see these TA's in your future classes, make sure to drop immediately:\nFei Peng\nAtif Ahmed\nJingjing Ling\nKilol Gupta\nGuanlin Zhou\nSajal Khandelwal\nKevin Raji Cherian"},{"name":"user interface design","content":"Lydia is honestly such an amazing person. Her personality really shows through her lectures--you'll learn about all her favorite things: Star Trek, The Office, DDR, The Knicks, what the world's best boarding pass looks like. Her lectures are not heavy and very easy to pay attention to since she's so great at talking and is just so excited! She also does a good job of guiding people through the design process, focusing your attention on the little details and potential areas of frustration. Her slides have everything you need for the material, and I often find that it's enough to just pay attention. She also ends class early frequently and gives a nice summary after every lecture.\nFrom someone with no webdev background, it would've been nice if she taught some basic technical stuff i.e. JS, HTML, CSS. To be fair, webdev is hard to learn without trying it yourself, and the functions you need are often specific to what you want to implement. Our first programming hw was a static replica of the Gmail interface, which killed me as a newbie. Her written HWs are a bit subjective since she seems to have an answer in her head that she's looking for, and it's not always clear as to how much of an explanation is enough. The final project for this class is spread across 6 weeks, and she provides \"milestones\" along the way to keep you on track. She also emphasizes the importance of early feedback in the design process and allots class time for feedback exchange between peers. Overall, if you have some kind of front end experience, this class should be chill.\nThere is a \"participation\" component of the grade that is annoying for many, because your name has to be recorded by a TA hidden in the back of the room. Lydia likes to engage the class with short answer questions, and will call on people to speak. Your participation grade is almost entirely dependent on how well she can remember your name, and how hard the TAs try to figure out who spoke. Apparently the TAs came up with a scheme to remember where each of the three asian Kevins sat. It's often unfortunate for me to be one of the many shoulder length haired asian girls in the class, and it's a small victory on my part on those rare occasions when she gets my name. She definitely needs a better system to track participation, but if she doesn't establish one, I'd advise you to dye your hair purple before taking her class."},{"name":"artificial intelligence","content":"Simply the best professor ever. He also happens to get the best TAs."},{"name":"analysis of algorithms i","content":"Christos Papadimitriou is easily one of the best teachers, not just in the CS department, but at the whole university. Rather then just writing summaries of the text book on the board for students to copy, he actually engages the students and instills the core principles of concepts in each lecture. He also adds fun historical facts and jokes throughout his lectures. His weekly psets were quite challenging, but thatâ€™s by nature of the subject. Christos doesnâ€™t hide the fact that his psets are challenging, and consistently encourages students. He even throws â€œhomework partiesâ€ during the semester, where he books a conference room and orders food, and lets students collaborate on the give. Pset together. Iâ€™ve never had a teacher more invested in their students success. \nAs an added bonus, Christos isnâ€™t just some random lecturer. Heâ€™s one of the most famous and accomplished  theoretical computer scientists in the world. Having access to such a legend is truly astonishing. In his office hours, heâ€™s willing to discuss anything research related. Heâ€™s also one of the most charismatic people Iâ€™ve ever met. If youâ€™re lucky enough to be able to take a class with Christos, take it!"},{"name":"analysis of algorithms i","content":"Experience was consistent with earlier reviews:  Eleni is a decent lecturer and even throws in real world examples of how particular algorithms can be applied to problem solving.  Unfortunately, her homework problems do not align with the material taught, she provides no review for the exams, allows no note sheet on the exams, and throws several questions in there which had nothing to do with what she recommended to study. \nIronically, for all her rhetoric on every homework about using only the book and lecture material (i.e. no outside research), if you Google her problems you can find she herself has plagiarized them from other sources, which explains why they don't sync up with her lectures well.  In all, I thought the lectures were interesting, but this could have been a far better course as her methods were ingenuous and designed to set students up for failure.  She does curve, but expect a C if you're not strong in theory and proofs."},{"name":"artificial intelligence","content":"This class is among my favorite CS classes at Columbia, and I've taken some with fascinating course material. Tony is a great teacher, a really nice guy, and tries so hard to make sure you learn what you're supposed to. A huge chunk of the class consists of algorithms and Tony goes through each one really well until you really get it. A lot of the people I know who took a class with Tony stick around to take his next class."},{"name":"artificial intelligence","content":"You're significantly better off going through the AI lectures from Berkeley off of which his entire course is based on. The professor is not good at explaining the reasoning behind the mathematics involved in the course and after a certain point, it's hard to follow his lectures when all you hear are math terminology with little to no connection to how they're used for AI. He tries to be as helpful as possible, but when you're that confused - I don't think it'll help.\nHomeworks are annoying given that there are revisions to the questions 10 days into the assignment - and are fairly difficult when compared to the examples solved in class. They're also weighted weird, with some 5 point questions taking 2 minutes to solve, while some 5 point questions take upwards of 1-2 hours with a ton of calculation involved. The programming sections are nice though, so no complaints there.\nHe's a super nice guy and tries to make everyone understand the subject, but he's not a good professor for this particular course. Especially when compared to the source material from Berkeley"},{"name":"analysis of algorithms i","content":"Take a class with Christos!! He cares a lot about his students and is a fascinating and wonderful person to know. His office hours have been one of the best parts of my college experience. His psets are difficult, but he is flexible, helpful, and brilliant. Also, he is the author of multiple novels and a wonderful comic book series called logicomix. Ask him about it in his office hour sometime."},{"name":"programming languages and translators","content":"Incredibly poorly run class. Homework grades released months after assignments were submitted, rarely in time for exams. Only 1 homework covered material on the final exam, incomplete answers were released 5 hours before the final. Programming based assignments barely reflected theory learned in class, most of the work was done in reading documentation of the framework we were working in. Professor refused to release answers to last programming assignment publicly (answers required for extra credit assignment due during finals period), and students had to chase after TAs to get the solutions mailed individually."},{"name":"programming languages and translators","content":"Very disorganized professor - every homework/programming assignment needed last minute clarifications. \nTeaching was disorganized (didn't learn a single thing from lecture), and what was discussed in lecture was completely different from the homeworks. Doing the homework assignments depended on going through the source code of LLVM, navigating around documentation on your own, and trying to figure out what was going on. This was justified by the professor because she said that obviously theory taught in class will be different from applications on homeworks. But had a student not posted a Google Doc on Piazza of research that she had compiled and shared with the class, honestly I wouldn't even know what LLVM is. Grading was very arbitrary.\nOverall, I think the professor cares very much about teaching her students and making sure that we understand. This is apparent because she took time in class to ask for and answer questions. However, I had no questions because I didn't even know what to ask. All her slides are also adopted from other professors and better versions can be found online.\nI would recommend taking PLT with any other professor if possible."},{"name":"operating systems i","content":"It is everything they say it is, but Prof Nieh is one of the best professors I've ever had the pleasure of studying with at Columbia CS. His lectures are very clear and he's super kind and approachable. Also, comparing notes with my friend who took OS with Jae, I'm not sure Jason's is the harder rendition as it's been rumored to be. The TA's this semester (Fall 2019) are also very good and went out of their way to help students with the assignments, and preparing for the exams. Granted, I took the class with a 4-course semester so maybe that's part of why I managed it okay. Still, if you're interested in how the operating system works, would recommend that you throw away your fears and just take it."},{"name":"user interface design","content":"The second half of the course should be called Functional User Interfaces."},{"name":"introduction to databases","content":"I really enjoyed this class, and Professor Ferguson was an excellent instructor. He was also very available: he held in-person or video office hours all the time, especially near homework or exam deadlines. Also, all of his lectures and online OH were videoed and posted to Courseworks.\nI got the impression taking this class that other sections may be more focused on theory than practice - in this section, most of the homework (and lectures) were focused on how to work with databases than learning database theory. We did spend some time on theory, but as little as Professor Ferguson thought he could get away with, which I really liked. Most of the semester was spent learning SQL, but we spent some time on relational algebra, a little bit of time on graph databases toward the end of the semester.\nAbout half of the homeworks were programming projects in python, using pymysql. Time consuming, but certainly doable and taught me a lot. There was sometimes some ambiguity in the project guidelines, which generated a lot of questions on Piazza, but I think the consensus from Professor Ferguson and the TAs was that you could make whatever design decisions you thought were wise, as long as you included your rational in the README. Basically, I thought the assignments and grading were very fair. Later homeworks (and both exams) were turned in in the form of jupyter notebooks, and a lot of the lectures were available for download in that format; it was a bit of a pain to set up at first but absolutely necessary. Components of some homeworks were also to submit complex SQL queries.\nProfessor Ferguson was also just really understanding and adaptable to different circumstances. If you really need an extension, he will almost certainly grant it. Also willing to listen to student feedback in general: when I took the class (fall 2019) Professor Ferguson used a baseball database for an in-class example nearly the entire semester and as the database for several homeworks. I personally didn't mind this, but some students found the specific terminology to be confusing. Professor Ferguson took this into account and said he would not plan to use this database in the same way in future semesters."},{"name":"user interface design","content":"One of the most interesting professors to teach. She's very enthusiastic and hyper. From previous comments here, I see she's changed her attendance policy a bit. We submitted a google form with what we said in class or if we did not speak by a certain time after class. For the first time, participation wasn't as difficult as I thought it would be. She purposefully asks a range of questions from super easy ones like, \"What do you click on amazon's webpage to buy a book?\" while the picture is on screen to more technical questions. She does this so people will be more engaged. I'd say that classes are fun, but I agree, technical stuff isn't really taught in class. I'm glad I decided to learn html, css, and a bit of javascript the winter break before, but as the projects became more complicated with flask and python, I struggled quite a bit."},{"name":"introduction to databases","content":"This is the most disorganized course I've taken. There is no clear homework submission detail, no clear expectation for the homework, no clear instructions and a super super super messy Piazza. This professor use piazza post as extra credit, leading the piazza posts to a place full of duplicated and junky messages. Please just avoid this professor if possible, super bad experience"},{"name":"introduction to databases","content":"TLDR: Very good professor. Getting an A is more than doable. \nLonger Review:\nEven though the lectures might not be that relevant for the homework at times, they are very interesting and it is good to learn from a leader in the field like him. The class is divided into a programming track and a non programming track. Unless you are a CS major or really want to get good at programming databases, I would take the non programming track as it still is has tons of SQL. For both tracks, the homework seems really confusing at first. This causes lots of stress. However, Professor Ferguson makes videos which really really help. Also, he and the TAs hold many office hours and are always available to help. You also get a certain amount of late days (I believe it is 5?). As long as you don't procrastinate and use the videos & office hours, the homework's become very doable. If you procrastinate and don't use the help provided, you better be really smart otherwise you will do pretty poorly."},{"name":"analysis of algorithms i","content":"I had an excellent experience with Prof. Drinea, which perhaps is not consistent with some of the earlier reviews. I found her to be an amazing lecturer who was capable of commanding the class's attention despite a biweekly 3 hour-long class over Zoom (Summer 2020), and I can genuinely say that I did not once feel lost in class, despite her rather rigorous treatment of the material. The homeworks are difficult (they remind me most of a challenging mathematics PSet, there is rarely any programming, and if there is, it's treated as extra credit), and the hardest problems come from the TAs, but I found them to really enhance my understanding of the material and be incredibly rewarding to complete. I am worried that organized cheating was rampant, since the averages were incredibly high despite the immense difficulty, but she will reassure you that if you really understand the homeworks, you will do well on the exam, which I found to be true in my case. Grading on individual assignments can be harsh, but is always very clear. The average on the final was around a 45%, but because I had taken the time to do each of the homeworks honestly, I easily did much better. I have no complaints regarding final grading, either. Lastly, Prof. Drinea is incredibly kind and caring despite the difficulty of the class, and I believe that she is ultimately very fair. I would absolutely recommend this class, and although Prof. Stein literally wrote the textbook, you cannot go wrong with Prof. Drinea."},{"name":"introduction to databases","content":"Professor Donald is absolutely one of the best professors I have met in CU. He is a very kind person and really takes care of his students. The course delivery is good and course materials are well organized in his GitHub repo. His homework does match with the content he teach in class, so as long as you listen to his class carefully, you will be okay. Midterm and final are take-home exams, which in general contains around ten coding or short-answer questions, which are pretty like homework questions. \nDonald is the most accessible professor who will almost hold office hour everyday. You can easily find out some OH time spots. Also Donald holds review session to help students review class content about a week before homework deadline. He also gives some useful hints to guarantee students to be on the right track. He replies email very quick and could solve your question in a very short time. \nI really appreciate Donald to provide a good database class and I strongly recommend his DB class to all students."},{"name":"user interface design","content":"I love this class!"},{"name":"artificial intelligence","content":"This professor is great! He's such a sweet, caring man and he will do everything in his power to help you understand the class material. Seriously, attend his office hours! He's very very understanding and helpful! \nHis lectures are well organized and are generally very good for solving the homework problem sets. He bases much of the homework/quiz material from his lectures. He writes all of his own problem sets and quizzes.\nDo be aware though, that as good as this professor is, he is definitely on the harder side. After every lecture, there is a required 5 question quiz. Nearly every question will leave you baffled and scratching your head over concepts that you thought you understood quite well from the previous lecture. This man has a talent for really, REALLY testing your knowledge of the material in a way that forces you to REALLY think about the question and how to get the right answer. His quizzes are tough, and you really need to understand the concepts inside and out to get full credit.\nHis homework sets are not easy either, so you'll want to start as early as possible. Some questions take about 15 - 20 min to understand and complete, while others take hours and hours to understand than code properly. Again, he's going to really test your knowledge of the concepts in class in different ways. Some of the homework questions during the latter part of the course I felt were a bit too challenging at times, such as probability and hidden Markov models, given that this was a short 6-week course. \nThe TAs for this class were AMAZING. If I couldn't get some python code to work right, I'd show one of the TA's and they'd walk me through why the code was not working and possible solutions to get it working correctly. The TA's were very helpful with the coding portions of the homework, and I think generally understood that this class probably should NOT be an \"accelerated\" 6-week course. \nAs good as this professor is, I can't recommend anyone take this class in its current state. Columbia made this course into a 6-week \"accelerated\" class, and as nice and sweet as this professor is, the class is simply too difficult and stress-inducing. Why Columbia thought making this class into a short term class was a good idea, I honestly have no idea. The class moves WAY, WAY to fast for a normal human being to fully grasp and understand all the various seemingly complicated concepts in a reasonable manner.\nIf you can delay taking AI until they make this class into a full term, 12-week course, than do it. Otherwise, take this class on a lighter load."},{"name":"programming languages and translators","content":"Overall, Professor Ray tried her best to be accommodating during this difficult semester, often adjusting assignments and exams based on what she interpreted from the class feedback. The problem is, I think she misinterpreted a lot of what we had to say, which just served to add to the stress of this course. \nA good example is the final exam. Students expressed that the midterm was difficult because of the time constraint, so the professor removed this restriction for the final. This would be great, if the final didn't end up being orders of magnitude more difficult than the midterm. The professor claimed the exam would require 3 hours max, but the overwhelming sentiment on the Piazza was that the final required somewhere over 10 hours to get through. The professor justified this by explaining that the TAs were able to finish the exam in 3 hours, but this doesn't make sense as they were probably A+ students in the semester they took the course. The final wasn't difficult because the material was poorly taught or inaccessible, but because the questions, diagrams, and code snippets were overly complex to the point where it was more about keeping track of random information instead of the actual material being tested. Obviously, it was hard for everyone, so the curve reflected this, but frustrating nonetheless.\nThe TAs also have a long way to go in terms of being effective. While they were willing to let people bring concerns about the class to them on Piazza, they almost always became incredibly defensive whenever any problems were brought up. Even though the instructor and TAs made the grading scheme and schedule more lenient, they often required a large amount of people to complain for fairly obvious issues, like homework being due on University holidays or a few days after a previous assignment. They seemed really out of touch with the class, making long posts explaining that they weren't out to get students. If you have to make a post explaining that you don't want to rule the world, you've gone wrong somewhere.\nThe assignments are not that difficult, you just implement basic tree traversal algorithms and find the correct function to use from the LLVM API, and generally took 4-5 hours each. A big plus is that you don't have to do a group project like other PLT sections.\nHonestly, I would probably take this course again just because I felt like the assignments weren't that bad and there is no group project. Just be prepared to be endlessly frustrated by Ray and the TAs."},{"name":"introduction to databases","content":"One of the best professors I've had at Columbia. He truly cares about his students, explains concepts clearly, and I think he does a good job of making himself available for OH. Sometimes he sends out an email indicating that he's having office hours in 20min which is short notice but if you are really having trouble, he's open to meeting with you one on one and help you solve your problem. Also, there were office hours pretty much every day thanks to the TAs. Truly a great professor."},{"name":"artificial intelligence","content":"Professor Dear is probably one of the best teachers I've had at Columbia. He breaks things down clearly and concisely, presenting a couple of concrete examples in-depth for each topic to help things click. \nThe quizzes, while a bit annoying to complete after each lecture, really incentivized me to review the material, which was helpful in that it helped me stay on track (especially crucial in a 6-week course). They were a mix of understanding how to run through the algorithms he presented in class as well as questions that had more to do with your intuitive understanding. So, while not a walk in the park, they were very fair and it's not impossible to do well on most, if not all of them. \nThe homework assignments were also quite fair. They were a mix between programming and short answer responses and generally contained no surprises. I personally thought the programming wasn't too bad, though the short answers could be a bit tougher at times since they relied on truly understanding what was going on (which is a good thing). Make sure you have at least a rudimentary understanding of Python before taking this course. \nI thought that the quiz portion of the final was a bit tougher than the ones we had throughout the semester, but nothing that was unreasonable to expect. \nThe TAs were great too: extremely helpful in OH and on Piazza, returned assignments in a timely fashion, and graded everything fairly. \nOverall, Professor Dear's course is highly organized, well-taught, and extremely well-run, even when considering that it was an accelerated course (which was just a bad idea on Columbia's part). The class definitely isn't easy, but it definitely is possible to succeed if you take the time to internalize his lectures. All the praise he received in previous reviews is more than well-deserved."},{"name":"introduction to databases","content":"This guy needs to have his silver nugget taken away. His good CULPA reviews are deceptive (notice all the disagrees). This class was my worst CS experience at Columbia so far -- the reviews are right that Ferguson is extremely kind and accommodating of tough circumstances; however, that doesn't balance his extremely out of touch teaching style. The lectures are messy and unorganized, don't help with the homework, and he often attributes his disorganization to \"helping us gain real-world CS experience.\" There's a very clear line between encouraging students to make their own design decisions and giving so little instructions that Piazza becomes a hot mess. \nThroughout the course, I found the assignments to not be conducive to learning at all. You're basically expected to self-learn SQL, Neo4j, and various complicated database system concepts with conflicting instructions from the TAs. The midterm was ten questions with up to 12 sub-questions for each question and further sub-questions for those sub-questions taking 40+ hours to complete. Assignments take multiple (3+) weeks to be returned and are basically impossible to do without further TA/instructor help. \nI will say that Ferguson makes himself extremely available (to the point of impromptu 4 AM office hours) and towards the end of the semester, realized how difficult the assignments were, thereby giving us 5 free extra credit points. However, that doesn't deny how difficult this class was and how little it taught me."},{"name":"introduction to databases","content":"He's a good professor and once you actually get to know him, a nice guy, but the class itself is a total disorganized mess. I can understand how challenging it would be to design an introductory class based on basic database/SQL concepts because, well, it's not all that challenging, to begin with. SQL really isn't a programming language at all and it's very easy to learn. Basic concepts like \"data cleanup\" and writing the correct SQL query to get the data you want are really not all that hard. Basically, he could spend two or three weeks running through a few examples of various SQL queries/terms, show everyone how to set up basic database software, run through a few basic definitions from the textbook, and that would be the entire class. \nBecause he does not want to run the class this way, (not to mention it would be far too short), you're basically stuck having to google your way through the majority of the class to teach yourself the concepts that were given very little, if any, time in a lecture. Going to the various TA office hours becomes mandatory as well. \nThus, much of his lectures are \"filler\" material that hardly pertains to the class assignments/homework at all. You'll often find yourself saying: \"Well, that was nice to know and quite interesting, but how does this relate to the class assignments?\" Well, it doesn't, because again, the basic concepts of this class are not really all that hard and can be explained in a few weeks, so he fills each class with things that are certainly database related, but are not useful at all for doing the homework. Again, from a class design perspective, I can see why he does this, but it makes going to the lectures tedious and incredibly boring. \nThe main problem with this professor is how INCREDIBLY long the assignments take.  You'll spend hours on google and working with the TA's to complete the overly long assignments not only because you'll have to teach yourself how to do them, but also trying to resolve the various technical/error messages that will arise as you do the assignments. I think I spent more time trying to resolve various error messages in MySQL Workbench than I did learning about databases.\nOh, and the midterm was one of the most stressful experiences of my entire life, mainly because of the way he phrases/asks the questions. The way he words the questions are so ambiguous that you'll be on piazza constantly looking for clarification on whether your approach to the question is correct or not. Doing the assignment involves knowing lots of SQL and getting your queries to run right. To make things more frustrating, every question has a subpart, and those subparts have subparts, so the entire exam is VERY long. The entire assignment took me somewhere in the range of 30+ hours and it was a disaster. \nAlso, when do you want clarification on a specific question, you'll find that you get different answers from different people. If you ask Prof. Ferguson, he'll give you one answer, but the head TA will give you a different answer, and another TA will give you a totally different answer, and maybe another TA will tell you something else entirely. Basically, you'll quickly discover that nobody really knows what is going on or has any idea how to resolve the issues you/the large majority of the class are having, so you'll just become even more confused. Making annotations that accompany the answers you give in the assignments is basically mandatory because nobody really knows what is going on.\nI hate to be so negative, as he's a nice guy and all, but by the end of the class, I think he realized just how much of an absolute and total mess this class turned out to be and just gave the large majority of the class an A. Oh well!"},{"name":"artificial intelligence","content":"Tony Dear is an incredible professor. He is highly organized and is great on staying on task. He is clear and teaches his material very carefully. He is also very nice and kind and will tend to questions and never judge for asking any question.\nI was very scared for AI but it proved to be my favorite class taken at Columbia.\nI HIGHLY recommend him!"},{"name":"analysis of algorithms i","content":"I am an Eleni Drinea stan!!! I took Analysis of Algorithms with her in Spring 2020 and absolutely loved it! Eleni is a very engaging and clear lecturer and I never felt bored during class. I think algorithms tend to get a bad reputation but this class really made me fall in love with the subject. I cannot recommend this class any higher. Not only was it fun, but it was also worthwhile, as many interview questions are about algorithms and you will feel very comfortable with the material after taking the course."},{"name":"introduction to databases","content":"Prof. Ferguson is a nice guy and seems to care for his students' learning. However if would like a well organized course instead of an unimaginably chaotic mess I suggest you try one of the other sections."},{"name":"analysis of algorithms i","content":"He seems like a nice guy and I really want to like him, but he has been a terrible professor this semester. I want to preface this with the fact that I am taking his algos class during a Zoom semester, so I'm sure it's hard for everyone, including the TAs and the professor, but the class is incredibly disorganized. We have mandatory quizzes before every lecture on the lecture material (which, although aren't worth a lot of our grades, are still stressful to have to worry about). The readings that these quizzes will be on and the quiz itself are often not posted until 10 PM or later the day before our 10:10 AM class, and we are supposed to take the quizzes before the lecture starts. Weekly psets are also sometimes posted late (posted Friday and due before Wednesday morning). Piazza is the main medium of communication, which is messy and it's difficult to find important messages.\nAll in all, I would not recommend this class at all."},{"name":"analysis of algorithms i","content":"Agree with the top review. I really want to like him but this class has been the most awful experience I've had at Columbia. Only take this class if you are extremely self-disciplined and a genius in CS. A lot of people in this class are graduate school students, so if you are an undergraduate, be prepared to get lost at the beginning of the class. There are almost 100 people in this class, but there really aren't too many people participating due to the poor lecture structure and his teaching. I don't understand the majority of the things he teaches and have to rely on the textbook and self-learning 99% of the time. As an undergrad, I think this probably doesn't apply to a lot of the classmates coz there are a lot of graduate students, who probably have already seen most of the things taught in this class. Even though it's on zoom, he requires attendance, but I can't follow at all. There are always geniuses in this class who understand everything and make the professor think that everyone in the class understands what he's talking about. He enjoys putting us into breakout rooms, but NO ONE, literally NO ONE, talks in the breakout room (I'm not even sure whether people are actually listening to the course). He goes through everything pretty fast because you are supposed to understand everything deeply in the textbook before coming to the class, so you are basically fu.ked up if you don't do the readings. The content of this course is super important, but I really don't recommend Christos at all unless you learn everything on your own."},{"name":"user interface design","content":"I was initially skeptical of taking this course with anyone other than Prof. Chilton, however, Prof. Smith did a fantastic job. I took this Fall of 2020 and it was one of the few classes during the pandemic that kept me entertained. Prof. Smith's energy is infectious and he consistently gives energetic lectures. The TAs I interacted with were all very helpful and provided meaningful feedback. I thought the workload was easily manageable and grading was very generous (class average was probably around an A-). I still use a lot of the design skills that were taught and definitely felt like I learned a lot from the class. Overall, an interesting class with a great professor/TAs and fair grading, definitely recommend it."},{"name":"analysis of algorithms i","content":"Painful, painful class. Do not take it if Max Helman is the head TA."},{"name":"analysis of algorithms i","content":"I have a lot to say about this class, some of which is in response to what has already been said. I'll try to keep my argument structured and evidenced and give my final review at the end. For context, I'm an undergraduate junior who's already taken enough 4000 level classes in the department to feel confident vouching for these opinions. \n1. First things first, I agree with the other posts on the disorganization and intense workload of the class. Analysis of Algos is one of the most intense workload classes I've taken at Columbia (not the hardest, but a lot of work). It would've helped to have a reasonable routine for problem sets and for quizzes/readings, and it is really troubling that this was not followed. I agree that as a class, it's insane that we have to deal with this in the middle of an online sem. It's also crazy how a little bit of everything counts, so you cannot really slack off on any parts. The lectures are very fast, and it's not possible to keep up with the class at all points of time, with the readings the core resource in helping to follow. \n2. I do not agree with the assessment of the TAs, and especially name-dropping of the TAs in the post -- it's unfair and gives a very biased view of what happens in class. In my opinion, Max Helman and the team (despite their quirks) have done their best to be helpful. I think the grading is a bit too harsh with too many requirements, and rubrics need to be more precise, but this is common to most Algos sections. Previous posts mention that its ridiculous to have 3 hws, a project and a final in the final weeks of the class and I fully agree, but it's worth noting that the students voted to have a project to take the weight off of the final, and that the TA team orchestrated that the request was heard. I too voted for the project and it was a bad decision in hindsight, but this was not a TA decision to add more work. In my opinion, the TA team has been resourceful and responsive on Piazza despite being uncertain from time to time about logistics which I doubt were in their control. I had many instances asking for readings + homework, and was told that this decision had not been taken on a professor level despite them following up. This brings me to my final point:\n3. Christos Papidimitriou is a legend of the CS world. He teaches this class once in a while because he feels like it, and out of a pure passion for algorithms. The passion is apparent in his fast-paced lecturing style and the breadth of his syllabus. It's very rare to have a professor who's written the textbook of the class, and even rarer to have one of the smartest people in the world as your Prof with the crazy CS network Prof. Christos has: including the likes of the founding members of Google and Microsoft and several dozen Turing Award winners and award-winning textbook authors that are his friends. He has contributed to evolutionary biology as he has to game theory, to complexity theory as he to database theory. I think when people sign up for his class, people are looking for the experience of learning from a 'famous' professor. And I think the disorganization in the class is purely a consequence of the same: he's a very busy person who wants to say a lot about a lot of things. This by no means is trying to say it's ok to not pay attention to the requirements of the students. As I've said before, I disagree with how lectures and organization for the class went. I just think that the status of Prof. Christos's achievements along with the fact that he infrequently teaches the course means that the structure can get a bit haywire, not as a consequence of TA involvement but rather purely as an artifact of everything he wants to cover and how he relays this.\nFinally, I want to note all this is true of a zoom semester. There's close to no interaction in the lectures or breakout rooms and it's so easy to fall behind in class, after which the mandatory attendance requirement means that loads of people attend for the sake of it. naturally, the online learning environment does not lend itself to question answering beyond those that are already confident of the material and this contributes to the issue. I would not generalize from what I've written above or what others have written of the Spring 2021 iteration to beyond the online medium. \nFinal outcome: \nAgree with: heavy workload, fast lectures, disorganized content\nDisagree with: evaluation of the intentions and commitments of teaching staff. I think they've tried their best to help through the semester and the haywire experience is more a consequence of the general direction of the syllabus + online medium.\nSummary: take this class if you want the experience of having prof. Papadimitriou as your professor and want to flex about it for the rest of your Columbia journey and CS education career for when he wins his next big award. Don't take it if you expect light workload + easy psets related to the core algorithms taught in a more traditional algorithms sequence. Don't make a decision on whether to take it from looking at the TAs, but instead do so based on your expectations for the class. I doubt a change of staff will do one bit to alter the direction Prof. Christos takes his syllabus and expectations."},{"name":"analysis of algorithms i","content":"LMAO how much are we willing to bet that one of the butthurt TAs wrote the review from April 6? Itâ€™s obviously a bullshit review made to save face.\nAnyways, all the other reviews from 2021 are completely accurate. I agree that Christos is probably a nice person, itâ€™s just his lack of organization and terrible TAs that make this class trash. The format of a Zoom semester plays a hand in it too, but I honestly donâ€™t think things would be that much different if we were in-person with the same TAs."},{"name":"analysis of algorithms i","content":"This was a truly horrible class. Do not take this with Papa, whatever you do. Just because he's famous doesn't mean he can teach or explain. Insane workload, lots of it not on important/relevant topics to what most people actually care about algorithms for - interviews.\nDo yourself a favor, take this with literally anyone else. Better yet, pray that you have TAs that care enough about students to change the direction of a terribly run course."},{"name":"analysis of algorithms i","content":"I really do not know how people got through his lectures in person. His zoom class was a disaster, from the TAs to the exams to homework assignments. Awful and painful class. It's funny that he confuses himself a lot of times, and then ask \"IS IT CLEAR?\" How the hell it is clear when you don't even know what you are talking about!!! He really is a super nice and approachable professor. He smiles all the time and answers your questions and replies to your email, but that really doesn't change how bad this class is."},{"name":"operating systems i","content":"Echoing the most recent review (from January 2020), this course lives up to its reputation and is a ton of work, but is very rewarding. The workload is still the same 6 homeworks involving written and programming, with the last 5 programming projects done in groups of three. Averages on the hw are regularly around 50/100, and they are a serious time commitment. The rubrics (especially for the early hws) are very difficult and you need really robust error checking to get a good grade. Get a good group and start the homework early, or your projects will not work. The kernel development can be very confusing, and even if you know what to do, you will run into random quirks in the kernel code that takes forever to debug. In general debugging is very difficult. \nSo the course is definitely very difficult. I took it during a relatively light semester, had a good group with one member, in particular, carrying a lot of the work, and this class still made this semester pretty stressful. The first homework which is individual involves writing a shell program, and I would say is as hard as the harder AP labs (maybe slightly easier than lab 7?), and the next five get way way harder (though you have a group). I also agree with the 2020 review that I don't think Jason's class is that much harder than Jae's, but Jae seems to give you a little more guidance in how to write the kernel code for the hw. Jason's lectures are sometimes very high-level, but for some of the later hws, he definitely shows in class the parts of the kernel code you need to understand to do the hw. Understanding the kernel code is just hard.\nBut overall, this course also makes you learn so much and makes you really understand how your computer works. If you are an upperclassmen CS major who still feels like you don't understand how computers actually work and did decently well in AP, I really think you should try to take this class (either this section or Jae's). You will learn a ton and become a much better programmer, both from doing lots of low-level programming stuff and from how much better you understand how computers work. If you struggled in AP, though, this class will be very challenging and you should take a few more programming intensive upper-level courses before taking this one. But if you're a CS major who actually wants to have a decent grasp of how a computer works (which as a CS major hopefully you should!) take OS before you graduate."},{"name":"analysis of algorithms i","content":"Just want to mention, with overwhelming bad reviews, the first two reviews (which happen when everything is in person) are overwhelmingly good. I actually take this course due to those reviews.\nI do think Professor Papadimitriou is nice and knowledgable, and I don't know what happen to the course for this online version. \nJust want to point to the reviews for in-person course so that people can have their own judgement."},{"name":"artificial intelligence","content":"If you're going to take an intro to AI class, Dr Salleb-Aouissi is the one to take it with. Her presentation of materials is concise and she usually goes over each concept twice, and they build on top of each other. She's a clear lecturer and her slides are pretty in-depth. She's always available for help outside the classroom as well, as are the TAs. Some TAs are hit or miss as they're undergrads."},{"name":"introduction to databases","content":"Ok I know this class was a bit contentious and it wasn't perfect but I actually liked it???? I think 90% of this had to do with Prof Ross's Australian accent. I cannot confidently say I would have the same feeling if Prof Ross did not have an accent. But I thought his lectures were clear and he had a good command of the material. I thought the homeworks helped to enforce the lectures and they always reflected what was taught in lecture, there were never any surprises except for when we had to use formulas in the textbook but Prof Ross made it clear that was the case. The TAs were kinda bad tbh, there was one standout in my opinion and the rest were hit or miss. As long as you stay on top of lecture and homeworks, you'll be fine. I learned a lot of really relevant skills - before this class I didn't know how tf to route db calls through a web app but that's literally what you do for the front end portion of the project and that's also literally how web apps are built!!! Pretty cool. The only downside was yeah if you don't have prior experience with flask + html (I did not) then you're going to be looking up a lot of stuff if you choose to do the front end portion of the project. But it's worth it because now I feel like I have an infinitely larger appreciation for how this stuff actually works. Prof Ross is not the most approachable professor ever but he is helpful if you go to his office hours for questions or chat him on Piazza."},{"name":"analysis of algorithms i","content":"I thought Professor Stein was a pretty solid professor for this class (and probably the best option based on what I've heard about other Algos sections this spring). The workload was reasonable, the lecture slides were very clear, and the grades (seemed to be) reasonably curved.\nHowever, maybe it's just me, but I found myself pretty irritated with various aspects of this course. Some homework/exam assignment problems were nearly undoable. The lecture recording audio quality was horrible (up until it was fixed during the last couple of lectures). And last (and definitely) the least, the TAs. At best, they were unhelpful; at worst, they were troublesome. The midterm solutions file they posted was literal chicken scratch containing incorrect solutions, and I found their grading to be all over the place. I genuinely hope other students in the class had a better experience than I did with them - it wouldn't be hard to beat at all."},{"name":"operating systems i","content":"\"I'm a really big fan.\"\n - Satan"},{"name":"programming languages and translators","content":"I think Edwards is generally a good teacher. His office hours are really helpful and his HW assignments and exams are reasonable (most questions are basically the same as the HW questions except for one or two. The slides are super helpful and it was a good class to take over Zoom because I was able to rewatch a bunch of his lectures if I was ever confused. He's a pretty good lecturer, except that on Zoom he lets and encourages people to make random show-offy comments with inside CS jokes that are distracting, annoying, wastes time, and makes everyone who doesn't get them feel dumb for not knowing the conventions of some obscure language. We get it, Matthew Ottomano, you know Haskell.\nIn terms of the group project, it's very tricky, and you don't really get taught the material you need to do it until after you had to do it, and even once we learned the theoretical part of what we were doing, it was really hard to translate that to what we were implementing. Basically, you're very much on your own for figuring out to add features to your language beyond a basic C like language you're given as a starting point. For our group it wasn't too bad, but it's mostly because one of the people in our group clearly understood everything way better than the rest of us did and did a ton of the work. I'm not saying the rest of the group were slackers, everyone tried hard and put in a lot of hours, but we'd struggle to pair program a feature for hours and then the other person in our group would have just fixed it and also miraculously added a bunch of other features by the next time we talked. That said, the group you are with is super important. I don't have great tips about how to find a good group. Someone who you think is super smart is not necessarily the best teammate. It helps if you've worked together before and understand their workflow and work ethic. It's pretty cool to have a finished product by the end, but I don't even know how much of it I understand beyond the features I implemented. Actually even those I feel like I kind of stumbled around in the dark in making them, so I don't know if I actually understand them either.\nFinally, the TAs were not great in the class. One was fired apparently half way through the semester, some didn't seem to know Ocaml or really how to help with the project. I think it was partially because Edwards hadn't taught the class in a while, so he didn't have a super solid group of TAs that had taken his version, which I understand, but was kind of frustrating. \nOverall, this wasn't the worst class, and I would generally recommend taking it with Edwards. Your group will be the main determining factor on your experience taking the class, though."},{"name":"operating systems i","content":"OS with Jason Nieh is the most painful yet rewarding studying experience I've ever had in university. It is also one of the few moments when I feel Columbia is worth its tuition fee. AP turned to out be a very easy course for me and I grew so arrogant that I thought the rumors out there about the insane workload of OS are just rumors. But these \"rumors\" are real. THE WORK IS INSANE.\nNieh's lectures are pretty clear, but they are not easy to follow if you don't read the textbooks or kernel codes in advance. I didn't do the readings for some lectures and I had no idea what he was talking about after he went to \"out handy dandy source code.\" I agree with the last review that he did try to talk about things at both high and low levels. Most of the kernel codes he walked us through did help with the homework.\nThe Homeworks are just everything they say. Homework 1 and 2 are easy. Homework 1 is a simple shell and some assembly, the number of hours I spent was similar to Lab 7 in AP. Homework 2 is adding a system call and it is basically used to familiarize us with kernel programming. But HW3-6 are crazy. Each of them easily took more than 40+ hours. Textbooks didn't help. Google didn't help. Reading documents didn't help. Lectures didn't help much. The only thing that helped was tracing thousands of lines of Linux kernel source codes. Debugging was very difficult in the kernel. Every time I triggered a deadlock, my heart would freeze together with the system.\nI seldom went to office hours for other classes but I did this about twice a week for OS. Xuheng Li is one of the cleverest and most careful TAs ever! However, the grading of homework will only ruthlessly use a script to test a bunch of if not all the corner cases and deduct a lot of points. The average grade for HW3-6 is around 50%.\nA final word about the comparison between Nieh and Jae: they are both great teachers but their styles are different. Based on my experience taking AP and visiting his OS website, his lectures and homework instructions seem to be more hands-on. His OS section also covers some advanced user-space C programming, which is not touched in Nieh's section. I guess taking OS with Jae will have more work to do but the process could be potentially smoother."},{"name":"introduction to databases","content":"Someone posted this on Columbia Confessions last semester and it was the most accurate depiction of my experience in the class, so I thought I would share it here as well for future students:\n\"Itâ€™s 2035. You receive an email titled â€œCOMS4111 Final.â€ After spending 3 hours figuring out how to install a Python 3 emulator, you finally manage to open the Jupyter Notebook. Question 1 has 27 parts. The instructions have been removed in order to shorten the exam length. You get another email from Ferguson saying heâ€™s holding office hours 3 minutes before his wedding. A single tear rolls down your cheek. â€œJust like the industry,â€ you whisper.\"\nLet me give you a quick high school style literary analysis of this passage to help those thinking about taking the class understand better. The author uses hyperbole when they write \"2035\" as a reference to how late many of the assignments, grades, etc. are released despite the teaching staff claiming they will be released the next day. The author then goes on to evoke the pain of setup in this class: \"spending 3 hours figuring out how to install a Python 3 emulator,\" as much of your time will be spent fighting with your computer to just get the software you have to use connected and running. The assignments are very long with many parts, and the instructions are very confusing, a point alluded to in the metaphor that the instructions are almost as if they have been \"removed\". As the author illustrates, office hours do happen at random times and you have to be ready to hop on the call at any time of day, and possibly you too will get the chance to hear about his girlfriend. The author then begins to conclude this masterpiece by emphasizing the visceral emotions one feels through the imagery of a teardrop. This effect is compounded by the author's choice to use the second person throughout the passage. Finally, you are left reminded of Ferguson's constant belief that the undefined aspects of the assignments and acceptance of most solutions as long as they work are \"just like in industry\". By using such evocative imagery, the author, dare I say the artist, is able to capture not just arbitrary details, but the human experience of taking Ferguson's class.  \nAll in all, it was a decent but very chaotic and time-consuming class."},{"name":"analysis of algorithms i","content":"Don't listen to the haters. This class was fantastic. It was a bit disorganized sometimes, to be fair, but that ended up affecting my experience barely marginally.  If you're paying attention in class, you will learn so much.  Papa goes through a ton of material, but it's all very meaningful; we covered some really cool topics like game theory and quantum computing.  Papa is a living legend and you can tell.  He's an expert on these areas to the nth degree and knows how to teach it effectively and kindly.  Definitely an amazing teacher.  The TAs were honestly very good.  Prompt with Piazza questions, and as accommodating as possible.  Take this class if you want to put in a bit of work, but want to get a lot out of it as well."},{"name":"programming languages and translators","content":"Great class.  Some issues with the curriculum: we spent way too long on things like DFAs, NFAs, and regexes, which are covered pretty fully in CST, which is a prerequisite for this class, so that was a bit of a waste of time.  We also spent a bit too long on covering code generation, which became repetitive, so we did have to rush a bit at the end.  But codegen is really important for the project, so it shouldn't be ignored, but spending ~5 classes on MicroC codegen was a bit much.\nEdwards is a great lecturer.  He's very funny and presents the material in a way that makes it very conducive to picking it up rapidly (or wickedly fast, as he would say).  His lectures were actually a joy to go to.\nThe best part of this class imo is the project, though.  One of the most rewarding pieces of work I've done at Columbia.  It really is a great synthesis of all the course material, and juts is a lot of fun to work on.  Start work early, and work consistently.  It will be a great time."},{"name":"programming languages and translators","content":"Stephen Edwards is objectively an outstanding professor who made the online year a little better for me. I took both of his classes, and I thought he adopted to the online format very well (he makes great use of Zoom's chat feature for questions). He is incredibly organized, cares a lot about his classes and his students, and has some outstanding TAs (Ben Flin and Hans Montero were amazing). Not to mention, he is one of the only Professors in the CS department who actually tries to get to know undergraduates in his classes! I really appreciated this and feel like I actually know him now.\nOh, and did I mention that Prof. Edwards is absolutely hilarious? I think the quotes above will suffice, but his slides have great memes, his Facebook might be the most entertaining of any Professor's, and he is incredibly witty. If you enjoyed Donald Ferguson's snarky humor, Professor Edwards is for you; if you have a thin skin, you might want to stay away, since he will absolutely sass you back. I, personally, think it is wonderful, and I think most people do as well.\nAs for the actual classes, Parallel Functional Programming is an introduction to programming in Haskell. The first half is sequential Haskell and the second half is parallel Haskell. Haskell is nothing like other programming languages you have been exposed to (unless you have taken PLT and are used to OCaml), and it probably does warrant an entire course since it forces you to think in an entirely new way. There are 5 HW assignments and a medium-workload final project that you spend the last month or so on and do in groups of 2. I'd absolutely recommend this to anyone looking for a chill class, even if they aren't on the systems track (Edwards has said this is similar to a 41xx class).\nProgramming Languages and Translators is an introduction to Compilers, and for many students, functional programming with OCaml. I was at the advantage of having taken PFP beforehand so this wasn't a huge jump for me, but it is for many. You also learn some theory. There are 3 light-ish HW asignments, a final, and a very heavy group project that you do in teams of 3-5. Pick a good group!\nI believe both classes were curved to a B+, so it is very possible to do well. I cannot recommend Prof. Edwards any more than I already have; seriously, take a class with this man! If for nothing else, the memes are worth it."},{"name":"programming languages and translators","content":"Ok first I took this during a COVID semester. With that being said, I personally don't think Edwards taught. He kinda just read off his old slides and circled some things. I also think we spent way too long on the wrong material and then suddenly material in the middle-back half of the semester was essential to the final project. It was hard to start parts of the final project early since we didn't know a lot of the material needed to actually build our language."},{"name":"programming languages and translators","content":"Positive things:\n- There is no doubt that Professor Edwards is very knowledgeable about his field and really cares about helping students who are reaching out to him and want to learn from him.\n- He holds 167468294 office hours a week, so take advantage of them. \n- He responds to emails in light speed.\nAreas of improvement:\n- If you're going to constantly run over the end of class time, you might as well ask the CS Department to make your class 2 hours long, so people have better expectations. Although that would require Edwards to deal with bureaucracy, which I'm pretty sure he won't bother with. It's much easier to fuck with student schedules for him, but it irritates the fuck out of every student.\n- Set a deadline for grading for your TAs, man. It's not that hard. \n- Please get TAs that actually know OCaml... \nNegative things inherent to the course:\n- Pick a good team or you'll get fucked. The project is monstrous and you can't do it alone. You need good teammates to decide on the project features together and implement them together.\n- I understand that Edwards tries to teach a lot, which is why we have individual assignments, midterm (normally, it was canceled this sem), final, a monster project, a ~250 page final paper on the project... but man, this is a lot of work. If you're not ready to put in the hours, don't take this class.\n- Docker and OCaml can be very frustrating, but they will uncover new areas of software development for you.\nAdvice:\n- Test everything. He won't accept anything that's not tested.\n- Start the project early.\n- Edwards is snarky, don't take it to heart.\n- If the assigned TA is useless, stop wasting your time meeting with them immediately.\n- Trust Edwards in that when he's giving project advice, he's thinking the best for you. He's also not out to get you in the exams."},{"name":"analysis of algorithms i","content":"Prof Stein is a great lecturer and I often enjoyed attending class/watching the recordings. The audio quality of the lectures became quite poor in the middle of the semester, which made it difficult to follow along to what he was saying. However, he did fix this after a few weeks when students brought this to his attention on piazza. \nThe TAs arenâ€™t the best... Iâ€™m convinced theyâ€™re either careless or donâ€™t fully understand the material. There were a lot of complaints about the ways TAs graded the homeworks/exams. \nThe exams are also quite difficult. The midterm and final both only had around 4-5 main questions, with each question either requiring a nontrivial proof, algorithm or both. If you donâ€™t study, I feel like itâ€™d probably be hard to get anything right, since there are no â€œeasy pointsâ€ or simple questions. You also really need to know your stuff and be prepared for everything, because anything from the semester could pop up on the exams. I spent almost half the time on the exams just digesting the questions before actually starting to write down anything. Not because the questions are poorly written, but because they require a lot of thought.\nThe class was curved very generously and I did learn a good amount. Overall I enjoyed the class and would recommend taking it with Prof Stein if youâ€™re looking to study algorithms more."},{"name":"operating systems i","content":"The course is insightful and covers good ground in terms of operating systems and how they work - This course is great for any CS student who isn't sure of what the OS does and how. The course gets into the weeds of the Linux kernel which depending on your point of view can be good or something that will haunt you for the rest of your days.\nThere are very good reasons why you should take this course but be sure of your reasons and make sure you have the time to dedicate to this course because it is time-consuming and mentally draining in some ways.\nThe rest of this review can kind of be summarized in -\"Workload is hell be ready for the pain going in\"\nPSA: If you're a masters student who already understands OS well enough and isn't from the software systems track and doesn't really need to enhance their C/linux kernel programming - DO NOT TAKE THIS COURSE (unless you like to suffer in which case nothing better really)\nHours upon hours are spent staring at the Linux kernel and going one level deeper till you've opened up 70 tabs and you've forgotten where you've come from who you are and why you even exist. \nThe first homework has really strict grading but is otherwise easy, aside from that though the rest of the Homeworks are a pain although they do broaden your horizons I would have been happier to not deal with them\nOffice Hours are a must if you hope to survive and are not already a kernel GOD and luckily we had a good bunch of TAs who understood the material and were mostly willing to point you in something of a direction(god help your souls if you gets a bad bunch of TAs which is unlikely).\nIf you get a bad team you will get torched and the 40+ hours that it usually takes per homework could easily turn into double that (I lucked into a good team but I saw the fate of others)\nThe finals and midterms due to the COVID semester were open book/note and coding based and quite related to the homework and not so much linked to the theoretical lecture content.\nI think it will go back to whatever it was earlier after COVID"},{"name":"artificial intelligence","content":"I took this course with Prof Dear but this review is more about the course than the professor.\nCOMS 4701 is very much \"plug-and-chug\" and leaves very little room for self-discovery. If this does not match your learning style, you will probably feel like you're wasting your time. Because there is so much hand-holding involved, it's easy to score well without doing all that much work. That said, I think this course is a great introductory course for non-majors or people just starting CS.\nMaterial--very broad overview of AI and high-level discussions of concepts. To get a sense of what the book is like, you can just check out the Wikipedia page on \"Artificial Intelligence\" or any of the topics on the syllabus. You will not find much more depth in 4701.\nQuizzes--the quizzes are mostly multiple choice and it's all open book. Extra study time generally is not rewarded as there's not that much depth involved. Also, expect some wrong multiple choice answers to be adversarial in nature so be prepared to second guess your response all the time.\nHomework--About 75-80% of the code is written all ready, and the remaining code is not difficult to implement. Most of it was translating pseudocode into python. The short answer responses were also not terribly interesting. \"Is this implementation more efficient than the other\", \"Is this guaranteed to find a solution\", etc.\nGrading--There is a curve, but it's probably not necessary since everyone is scoring in the 80s and 90s. The grading rubric is well defined and expectations for each assignment/quiz are clear. \nI would recommend this course to people without a background in CS or math. The professor is very knowledgeable and the TA's are helpful. Or, if you want an easy A, go for it."},{"name":"introduction to databases","content":"Many of the reviews so far are unfair and lack perspective. \nIf you're into thinking, actually understanding why, and experiencing what it is like to work as a software engineer, Professor Ferguson's class is the one to take. \nYes, the instructions are vague. Do you think your manager at work will give you a step-by-step outline of what to do? If you're at an elite organization that solves tough problems in the world (honestly doesn't that sound nicer than being a coding monkey???) then your manager will say, here is the exciting problem - solve it. Your will need to then reach out to people at your organization, do research online, use your brain. Yes, if you're new at a project and your boss is good, you can reach out to your boss AFTER you exhausted the other avenues. Otherwise, why does your boss need you over someone else if they always need to hand-hold you ever step of the way? Professor Ferguson stands in the middle where he provides helper code, provides recorded \"how-to\" examples to get you started, and is always there to help, whenever you ask. I've actually never seen a professor make himself so available to his students. Your manager probably won't even give you as much time! \nIf you're working on something important and novel after school, often there is no one \"right\" answer. Prof. Ferguson involves some such questions on his homework. Yet, instead of being excited, I saw many students get flustered and not know what to do when they are asked to think for themselves. For example, he asked students to create an ER diagram on some data. Students asked him questions such as \"is there a one-to-many relationship for x and y data?\" That is a coding monkey question! Ferguson pushes students to up-level their thinking to that of a best-in-class engineer. For example, the best engineers out there say, \"based on what we are trying to achieve and what data we have, here is my recommendation on how we organize it.\"\nThere are many other points on why Prof. Ferguson is one of the top professors I've ever taken, but I'll leave you with one more. Many professors tell you to memorize some rule, you memorize it, you answer on the test, and then you forget. Professor Ferguson asks you questions where you end up understanding the why and internalize the why. For example, everyone who has taken a databases class knows the different types of data storage, such as a star schema. However, do you actually know how to take some data that is not pristine, wrangle it into a star schema, and then query it? In what cases would you use a star schema over another layout? What data should actually be on what table? How do you take the data from Third Normal Form to a Star Schema? I bet if you didn't take Ferguson's class then you will need your hand held when you start working as you wouldn't actually know the answers."}]